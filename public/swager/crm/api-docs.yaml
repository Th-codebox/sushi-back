openapi: 3.0.0
info:
  title: 'Суши Фокс REST API для CRM'
  description: ''
  contact:
    email: dev@sushifox.ru
  version: 0.0.1
servers:
  - url: 'http://api.sushifox.ru/crm'
    description: 'API sushi fox server'
  - url: 'http://localhost/crm'
    description: 'local server'
  - url: 'http://sushifox.local/crm'
    description: 'local server 2'

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
security:
  - bearerAuth: [ ]

paths:

  /auth/login:
    post:
      tags:
        - 'Авторизация пользователя'
      summary: 'Авторизовать клиента'
      description: 'Авторизовывает клиента по номеру телефона и паролю, отдаёт Brearer token'
      operationId: Userlogin
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              required:
                - phone
                - password
              properties:
                phone:
                  type: string
                  example: '79228109900'
                password:
                  type: string
                  example: 'password'
              type: object
      responses:
        200:
          description: 'Успешный вход'
          content:
            application/json:
              examples:
                - $ref: ../api-example/CRM/login.json
        422:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Пользователь не активирован'
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_client/not_active.json
  /auth/me:
    post:
      tags:
        - 'Авторизация пользователя'
      summary: 'Получить данные пользователя'
      description: 'Возвращает данные пользователе'
      operationId: UserMe
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_client/me.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
  /auth/refresh:
    post:
      tags:
        - 'Авторизация пользователя'
      summary: 'Возвращает обновленный токен доступа'
      description: 'Обновление токена доступа'
      operationId: tokenRefresh
      responses:
        200:
          description: 'Токен успешно обновлён'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/login_success.json'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /auth/logout:
    post:
      tags:
        - 'Авторизация пользователя'
      summary: 'Выйти из системы'
      description: 'Логаут для текущего юзера'
      operationId: Userlogout
      responses:
        200:
          description: 'Выход успешен'
          content:
            application/json:
              examples:
                - $ref: ../api-example/logout.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json

  /permissions:
    get:
      tags:
        - 'Права доступа'
      summary: 'Получить список прав для пользователя'
      description: 'Возвращает список прав для пользователя'
      operationId: permissionIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/permission/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /roles:
    get:
      tags:
        - 'Роли'
      summary: 'Получить список всех ролей'
      description: 'Получить список всех ролей с параметрами пагинации'
      operationId: RolesIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ со списком ролей'
          content:
            application/json:
              examples:
                - $ref: ../api-example/roles/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Роли'
      summary: 'Создать новый роль'
      description: 'Создаёт роль и возвращает индификатор(id)'
      operationId: RoleCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Повар
                description:
                  type: string
                  example: Повар холодного цеха
                permissions:
                  type: string
                  example: [ { "permissionId": "1","type": "filials" },{ "permissionId": "2" },{ "permissionId": "3","type": null },{ "permissionId": "4","type": "schedules" },{ "permissionId": "5","type": "all" } ]
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /roles/{id}:
    get:
      tags:
        - 'Роли'
      summary: 'Получить информацию о роли'
      description: 'Возвращает информацию о роли по индефикатору'
      operationId: RoleOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор роли'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/roles/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Роли'
      summary: 'Обновить роль'
      description: 'Обновляет роль и возвращает результат'
      operationId: RoleUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор роли'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Повар
                description:
                  type: string
                  example: Повар холодного цеха
                permissions:
                  type: string
                  example: [ { "permissionId": "1","type": "filials" },{ "permissionId": "2" },{ "permissionId": "3","type": null },{ "permissionId": "4","type": "schedules" },{ "permissionId": "5","type": "all" } ]
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true

              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Роли'
      summary: 'Удалить роль'
      description: 'Удаляет роль и возвращает результат удаления'
      operationId: RoleDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор роли'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /common/checkAddressIsDeliveryByString:
    get:
      tags:
        - 'Подсказки'
      summary: 'Проверка доступности адреса для доставки'
      description: 'Передается адрес гет параметром, возврашается результаты подсказок'
      operationId: checkAddressIsDeliveryByString
      parameters:
        - name: address
          in: query
          description: 'Адрес для подсказки'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешны  результат'
          content:
            application/json:
              examples:
                - $ref: ../api-example/suggest/address.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        422:
          description: 'Невалидный файл/Не указан путь'
  /common/uploadImage:
    post:
      tags:
        - 'Загрузки'
      summary: 'Загрузить картинку на сервер'
      description: 'Загрущает картинку и возвращает массив с путём до файла и названием картинки'
      operationId: imageUpload
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              required:
                - image
              properties:
                image:
                  type: string
                path:
                  type: string
                  example: /collections/1
              type: object
      responses:
        200:
          description: 'Успешная загрузка'
          content:
            application/json:
              examples:
                - $ref: ../api-example/upload/success.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        422:
          description: 'Невалидный файл/Не указан путь'
  /common/uploadDoc:
    post:
      tags:
        - 'Загрузки'
      summary: 'Загрузить документ на сервер'
      description: 'Загрущает документ и возвращает массив с путём до файла и названием картинки'
      operationId: docUpload
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              required:
                - file
              properties:
                file:
                  type: string
                path:
                  type: string
                  example: /collections/1
              type: object
      responses:
        200:
          description: 'Успешная загрузка'
          content:
            application/json:
              examples:
                - $ref: ../api-example/upload/success.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        422:
          description: 'Невалидный файл/Не указан путь'
  /common/getSuggestName:
    get:
      tags:
        - 'Подсказки'
      summary: 'Получить подсказку по имени'
      description: 'Передается имя гет параметром, возврашается результаты подсказок'
      operationId: getSuggestName
      parameters:
        - name: name
          in: query
          description: 'Часть имени для подсказки'
          required: true
          schema:
            type: string
        - name: gender
          in: query
          description: 'Пол для подсказки, может содержать одно из значений - MALE/FEMALE'
          required: false
          schema:
            type: string
        - name: count
          in: query
          description: 'Колличество подсказок (максимально 20, по умолчанию 10)'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешны  результат'
          content:
            application/json:
              examples:
                - $ref: ../api-example/suggest/name.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        422:
          description: 'Невалидный файл/Не указан путь'

  /common/getSuggestAddress:
    get:
      tags:
        - 'Подсказки'
      summary: 'Получить подсказку по адресу'
      description: 'Передается адрес гет параметром, возврашается результаты подсказок'
      operationId: getSuggestAddress
      parameters:
        - name: address
          in: query
          description: 'Часть адреса для подсказки'
          required: true
          schema:
            type: string
        - name: field
          in: query
          description: 'Поле для подсказки'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешны  результат'
          content:
            application/json:
              examples:
                - $ref: ../api-example/suggest/address.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        422:
          description: 'Невалидный файл/Не указан путь'

  /common/callback:
    post:
      tags:
        - 'Телефония'
      summary: 'Запрос обратного звонка с клиентом по заказу id'
      description: 'Связь менеджера с клиентом по телефону (менеджер должен быть на смене)'
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              required:
                - id
              unique:
                - id
              properties:
                id:
                  type: int
                  example: 79
              type: object
      operationId: callback
      responses:
        200:
          description: 'Успешный  результат'
          content:
            application/json:
              examples:
                - $ref: ../api-example/printing/succes.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        422:
          description: 'Невалидный файл/Не указан путь'


  /printing/print-check:
    post:
      tags:
        - 'Принтеры'
      summary: 'Печать чека заказа'
      description: ' Типы чеков: "main", "hot", "cold"'
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              required:
                - type
                - orderId
              unique:
                - type
                - orderId
              properties:
                type:
                  type: string
                  example: 'main'
                orderId:
                  type: int
                  example: 48

              type: object
      operationId: printCheck
      responses:
        200:
          description: 'Успешный  результат'
          content:
            application/json:
              examples:
                - $ref: ../api-example/printing/succes.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        422:
          description: 'Ошибка валидации'

  /users:
    get:
      tags:
        - 'Пользователи'
      summary: 'Получить список пользователей'
      description: 'Возвращает список пользователей, могут приниматься параметры для пагинации'
      operationId: UsersIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int

      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/user/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Пользователи'
      summary: 'Создать нового пользователя'
      description: 'Создаёт пользователя и возвращает id'
      operationId: UserCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              required:
                - phone
                - password
                - name
                - email
              unique:
                - phone
                - email
              properties:
                phone:
                  type: string
                  example: '79228109900'
                password:
                  type: string
                  example: 12356qwert
                image:
                  type: string
                  example: server/path/image.jpg
                email:
                  type: string
                  example: test@example.ru
                lastName:
                  type: string
                  example: 'Семёнов'
                firstName:
                  type: string
                  example: 'Алёксей'
                surname:
                  type: string
                  example: 'Богданович'
                status:
                  type: bool
                  example: true
                filials:
                  type: string
                  example: [ { "filialId": "1" },{ "filialId": "2" } ]
                docs:
                  type: string
                  example: [ { "name": "БИК","group": "банк.данные", "path": "/server/path/doc.doc","description": "" },{ "path": "/server/path/pasport.doc","name": "паспорт" } ]
                roleId:
                  type: int
                  example: 2

              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/users/{id}':
    get:
      tags:
        - 'Пользователи'
      summary: 'Получить данные пользователя по id'
      description: 'Вовзращает данные пользователя'
      operationId: UserOne
      parameters:
        - name: id
          in: path
          description: 'id пользователя'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/user/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Пользователи'
      summary: 'Обновить пользователя'
      description: 'Обновляет пользователя'
      operationId: UserUpdate
      parameters:
        - name: id
          in: path
          description: 'id пользователя'
          required: false
          unique: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              unique:
                -phone
                -email
              properties:
                phone:
                  type: string
                  example: '79228109900'
                password:
                  type: string
                  example: 12356qwert
                email:
                  type: string
                  example: test@example.ru
                lastName:
                  type: string
                  example: 'Семёнов'
                firstName:
                  type: string
                  example: 'Алёксей'
                surname:
                  type: string
                  example: 'Богданович'
                image:
                  type: string
                  example: server/path/image.jpg
                status:
                  type: bool
                  example: true
                roleId:
                  type: int
                  example: 2
                filials:
                  type: string
                  example: [ { "filialId": "1" },{ "filialId": "2" } ]
                docs:
                  type: string
                  example: [ { "name": "БИК","group": "банк.данные", "path": "/server/path/doc.doc","description": "" },{ "path": "/server/path/pasport.doc","name": "паспорт" } ]
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Пользователи'
      summary: 'Удаляет пользователя'
      description: 'Удаляет пользователя и возвращает сообщение с результатом'
      operationId: ClientsDelete
      parameters:
        - name: id
          in: path
          description: 'id пользователя'
          required: true
          schema:
            type: string

      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/user/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/users/{id}/getBalance':
    get:
      tags:
        - 'Пользователи'
      summary: 'Получить баланс пользователя по id'
      description: 'Вовзращает баланс пользователя'
      operationId: BalanceUser
      parameters:
        - name: id
          in: path
          description: 'id пользователя'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/user/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json


  /clients:
    get:
      tags:
        - 'Клиенты'
      summary: 'Получить список клиентов'
      description: 'Возвращает список клиентов, могут приниматься параметры для пагинации'
      operationId: ClientsIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int

        -
          name: 'search'
          in: query
          description: 'Поле для поиска'
          required: false
          schema:
            type: string
        -
          name: 'text'
          in: query
          description: 'Текст поиска'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/client/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Клиенты'
      summary: 'Создать нового клиента'
      description: 'Создаёт клиента и возвращает id'
      operationId: ClientsCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              required:
                - phone
                - name
                - email
              unique:
                - phone
                - email
              properties:
                phone:
                  type: string
                  example: '79228109900'
                email:
                  type: string
                  example: test@example.ru
                name:
                  type: string
                  example: 'Алёксей Семёнов'
                status:
                  type: bool
                  example: true

              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/clients/{id}':
    get:
      tags:
        - 'Клиенты'
      summary: 'Получить данные клиента по id'
      description: 'Вовзращает данные клиента'
      operationId: ClientsOne
      parameters:
        - name: id
          in: path
          description: 'id клиента'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/client/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Клиенты'
      summary: 'Обновить клиента'
      description: 'Обновляет клиента'
      operationId: ClientsUpdate
      parameters:
        - name: id
          in: path
          description: 'id клиента'
          required: false
          unique: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              unique:
                -phone
                -email
              properties:
                phone:
                  type: string
                  example: '79228109900'
                email:
                  type: string
                  example: test@example.ru
                name:
                  type: string
                  example: 'Алёксей Семёнов'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Клиенты'
      summary: 'Удаляет клиента'
      description: 'Удаляет клиента и возвращает сообщение с результатом'
      operationId: ClientsDelete
      parameters:
        - name: id
          in: path
          description: 'id клиента'
          required: true
          schema:
            type: string

      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/clients/{id}/toBlackList':
    put:
      tags:
        - 'Клиенты'
      summary: 'Добавить клиента в чёрный список'
      description: 'Добавляет клиента в черный список'
      operationId: ClientBlock
      parameters:
        - name: id
          in: path
          description: 'id клиента'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                reason:
                  type: string
                  example: 'Клиент применил ненормативную лексику по отношению к администратору'
                endBlocking:
                  type: string
                  example: '2020-12-01'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/client/add_to_black_list.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/clients/{id}/removeFromBlackList':
    put:
      tags:
        - 'Клиенты'
      summary: 'Исключить клиента из черного списка'
      description: 'Отключает все баны'
      operationId: ClientRemoveBlock
      parameters:
        - name: id
          in: path
          description: 'id клиента'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/client/remove_from_black_list.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/clients/{id}/addAddress':
    put:
      tags:
        - 'Клиенты'
      summary: 'Добавить клиенту адрес доставки'
      description: 'Добавляет кклиенту адрес доставки'
      operationId: AddAddressBlock
      parameters:
        - name: id
          in: path
          description: 'id клиента'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                city:
                  type: string
                  example: 'Санкт-петербург'
                street:
                  type: string
                  example: 'Кропоткина'
                house:
                  type: string
                  example: '10'
                entry:
                  type: string
                  example: '2'
                apartmentNumber:
                  type: string
                  example: '54'
                icoName:
                  type: string
                  example: '54'
                name:
                  type: string
                  example: 'Офис на кропоткина'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/client/add_address_crm.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/clients/{id}/getClientCrmActiveBasket':
    get:
      tags:
        - 'Клиенты'
      summary: 'Возращает активную корзину в црм'
      description: 'Возвращает активную корзину клиента в црм'
      operationId: getClientCrmActiveBasket
      parameters:
        - name: id
          in: path
          description: 'id клиента'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/basket/basket_data.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /clientAddresses:
    get:
      tags:
        - 'Адреса клиентов'
      summary: 'Получить список Адресов клиентов'
      description: 'Возвращает список Адресов клиентов с параметрами пагинациями'
      operationId: ClientAddresIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
        - name: clientId
          in: query
          description: 'поиск по клиенту'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/client_address/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Адреса клиентов'
      summary: 'Создать адрес клиента'
      description: 'Создаёт адрес клиента и возвращает id'
      operationId: ClientAddresCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                clientId:
                  type: int
                  example: 1
                city:
                  type: string
                  example: 'Санкт-петербург'
                street:
                  type: string
                  example: 'Кропоткина'
                house:
                  type: string
                  example: '10'
                entry:
                  type: string
                  example: '2'
                floor:
                  type: string
                  example: '2'
                apartmentNumber:
                  type: string
                  example: '54'
                icoName:
                  type: string
                  example: '54'
                name:
                  type: string
                  example: 'Офис на кропоткина'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /clientAddresses/{id}:
    get:
      tags:
        - 'Адреса клиентов'
      summary: 'Получить адрес клиента меню по id'
      description: 'Возвращает данные категории меню'
      operationId: ClientAddresOne
      parameters:
        - name: id
          in: path
          description: 'id категории'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/client_address/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Адреса клиентов'
      summary: 'Изменить адрес клиента'
      description: 'Изменяет адрес клиента меню и возвращает ответ'
      operationId: ClientAddresUpdate
      parameters:
        - name: id
          in: path
          description: 'id категории'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        unique: false
        content:
          application/json:
            schema:
              properties:
                city:
                  type: string
                  example: 'Санкт-петербург'
                street:
                  type: string
                  example: 'Кропоткина'
                house:
                  type: string
                  example: '10'

                floor:
                  type: string
                  example: '2'
                entry:
                  type: string
                  example: '2'
                apartmentNumber:
                  type: string
                  example: '54'
                icoName:
                  type: string
                  example: '54'
                name:
                  type: string
                  example: 'Офис на кропоткина'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Адреса клиентов'
      summary: 'Удалить адрес клиента меню'
      description: 'Удаляет адрес клиента меню и возвращает ответ'
      operationId: ClientAddresDelete
      parameters:
        - name: id
          in: path
          description: 'id категории'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /categories:
    get:
      tags:
        - 'Категории меню'
      summary: 'Получить список категорий'
      description: 'Возвращает список категорий с параметрами пагинациями'
      operationId: CategoriesIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/category/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Категории меню'
      summary: 'Создать категорию'
      description: 'Создаёт категорию и возвращает id'
      operationId: CategoryCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              unique:
                - name
                - slug
              required:
                - name
              properties:
                name:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: susi
                ico:
                  type: string
                  example: path/to/server/image.jpg
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                sortOrder:
                  type: int
                  example: '1'
                crnSortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/categories/{id}':
    get:
      tags:
        - 'Категории меню'
      summary: 'Получить категорию меню по id'
      description: 'Возвращает данные категории меню'
      operationId: CategoryOne
      parameters:
        - name: id
          in: path
          description: 'id категории'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/category/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Категории меню'
      summary: 'Изменить меню категории'
      description: 'Изменяет категорию меню и возвращает ответ'
      operationId: CategoryUpdate
      parameters:
        - name: id
          in: path
          description: 'id категории'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        unique: false
        content:
          application/json:
            schema:
              unique:
                -name
                -slug
              properties:
                name:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: 'susi-2'
                ico:
                  type: string
                  example: path/to/server/image.jpg
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                sortOrder:
                  type: int
                  example: '1'

                crnSortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Категории меню'
      summary: 'Удалить категорию меню'
      description: 'Удаляет категорию меню и возвращает ответ'
      operationId: CategoryDelete
      parameters:
        - name: id
          in: path
          description: 'id категории'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /collections:
    get:
      tags:
        - 'Коллекции меню'
      summary: 'Получить список коллекций меню'
      description: 'Вовзращает список коллекций меню, может принимать параметры пагинации'
      operationId: CollectionsIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int

      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/collection/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Коллекции меню'
      summary: 'Создать коллекцию меню'
      description: 'Создаёт коллекцию меню и возвращает id'
      operationId: CollectionCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              unique:
                - name
                - slag
              required:
                - categoryId
                - name
                - type
                - target
              properties:
                name:
                  type: string
                  example: 'Супер комбо'
                description:
                  type: string
                  example: 'Супе комбо для всей семьи!'
                subTitle:
                  type: string
                  example: 'Дополнительный заголвок'
                slug:
                  type: string
                  example: 'slug'
                types:
                  type: object
                  example: [ "desktop","mobile" ]
                target:
                  type: string
                  example: 'home'
                categoryId:
                  type: int
                  example: '5'
                ico:
                  type: string
                  example: /example/image.jpg
                menuItems:
                  type: object
                  example: [ { "id": "5" },{ "id": "2" } ]
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/collections/{id}':
    get:
      tags:
        - 'Коллекции меню'
      summary: 'Получить коллекцию меню'
      description: 'Возвращает коллекцию по id'
      operationId: CollectionOne
      parameters:
        - name: id
          in: path
          description: 'id collection'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/collection/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Коллекции меню'
      summary: 'Обновить коллекцию меню'
      description: 'Обновляет коллекцию меню и возвращает результат операции'
      operationId: CollectionUpdate
      parameters:
        - name: id
          in: path
          description: 'id коллекции'
          required: false
          unique: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              unique:
                - name
                - slag
              properties:
                name:
                  type: string
                  example: 'Супер комбо'
                description:
                  type: string
                  example: 'Супе комбо для всей семьи!'
                subTitle:
                  type: string
                  example: 'Дополнительный заголвок'
                slug:
                  type: string
                  example: 'slug'
                types:
                  type: object
                  example: [ "desktop","mobile" ]
                target:
                  type: string
                  example: 'home'
                categoryId:
                  type: int
                  example: '5'
                ico:
                  type: string
                  example: /example/image.jpg
                menuItems:
                  type: object
                  example: [ { "id": "5" },{ "id": "2" } ]
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Коллекции меню'
      summary: 'Удалить коллекцию меню'
      description: 'Удаляет коллекцию меню и возвращает результат'
      operationId: CollectionDelete
      parameters:
        - name: id
          in: path
          description: 'id коллекции'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /menuItems:
    get:
      tags:
        - 'Эллементы меню'
      summary: 'Получить эллементы меню'
      description: 'Возвращает элементы меню, принимает параметры для пагинации'
      operationId: MenuItemsIndex
      parameters:

        - name: 'sortField'
          in: query
          description: 'поле для сортировки name/sort_order или любое другое из имеющихся'
          required: false
          schema:
            type: string
        - name: 'sortMethod'
          in: query
          description: 'asc\desc , по умолчанию desc'
          required: false
          schema:
            type: string

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int

      responses:
        200:
          description: 'MenuItems list'
          content:
            application/json:
              examples:
                - $ref: ../api-example/menu_item/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Эллементы меню'
      summary: 'Создать эллемент меню'
      description: |
        Создаёт эллемент меню и и возвращает результат
        <br><br><br>Параметр *stickerType* принимает следующие значения:
        <br><br>***child***
        <br><br>***spicy***
        <br><br>***vegetarian***
        <br><br><br>Параметр *stickerMarketing* принимает следующие значения:
        <br><br>***new***
        <br><br>***hit***
        <br><br>***percent***
        <br><br>***personalDiscount***
        <br><br><br>Параметр *type* принимает следующие значения:
        <br><br>***single***
        <br><br>***bundle*** (При данном значение принимается массив bundleItems)
      operationId: CategoryCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: susi
                technicalCardId:
                  type: int
                  example: 4
                categories:
                  type: string
                  example: [ { "id": "5" },{ "id": "2" } ]
                modifications:
                  type: string
                  example: [ { "modificationId": "1" },{ "modificationId": "2","priceAdd": "168","priceRate": "0.5" } ]
                bundleItems:
                  type: string
                  example: [ { "menuItemId" : "1", "modificationMenuItemId": "1" },{ "menuItemId" : "2", "modificationMenuItemId": "4"},{ "menuItemId" : "3"} ]
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                price:
                  type: int
                  example: 500
                oldPrice:
                  type: int
                  example: 400
                bonusAdd:
                  type: int
                  example: 100
                stickerType:
                  type: int
                  example: "spicy"
                stickerMarketing:
                  type: int
                  example: "hit"
                image:
                  type: string
                  example: /example/image.jpg
                composition:
                  type: string
                  example: 'Рис, лосось, кунжут'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
                hasStop:
                  type: bool
                  example: true
                needPersonCount:
                  type: bool
                  example: true
                type:
                  type: string
                  example: single
                hide:
                  type: bool
                  example: false
                souseId:
                  type: int
                  example: 2
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/menuItems/{id}':
    get:
      tags:
        - 'Эллементы меню'
      summary: 'Получить эллмент меню'
      description: 'Возвращает эллмент меню по id'
      operationId: CategoryOne
      parameters:
        - name: id
          in: path
          description: 'id эллмента меню'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/menu_item/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Эллементы меню'
      summary: 'Обновить эллмент меню'
      description: |
        Обновляет эллемент меню и возвращает результат
        <br><br><br>Параметр *stickerType* принимает следующие значения:
        <br><br>***child***
        <br><br>***spicy***
        <br><br>***vegetarian***
        <br><br><br>Параметр *stickerMarketing* принимает следующие значения:
        <br><br>***new***
        <br><br>***hit***
        <br><br>***percent***
        <br><br>***personalDiscount***
        <br><br><br>Параметр *type* принимает следующие значения:
        <br><br>***single***
        <br><br>***bundle***
      operationId: CategoryUpdate
      parameters:
        - name: id
          in: path
          description: 'id эллмента меню'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: susi
                technicalCardId:
                  type: int
                  example: 4
                categories:
                  type: string
                  example: [ { "id": "5" },{ "id": "2" } ]
                modifications:
                  type: string
                  example: [ { "modificationId": "1" },{ "modificationId": "2","priceAdd": "168","priceRate": "0.5" } ]
                bundleItems:
                  type: string
                  example: [ { "menuItemId" : "1", "modificationMenuItemId": "1" },{ "menuItemId" : "2", "modificationMenuItemId": "4"},{ "menuItemId" : "3"} ]
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                price:
                  type: int
                  example: 500
                oldPrice:
                  type: int
                  example: 400
                bonusAdd:
                  type: int
                  example: 100
                stickerType:
                  type: int
                  example: "spicy"
                stickerMarketing:
                  type: int
                  example: "hit"
                image:
                  type: string
                  example: /example/image.jpg
                composition:
                  type: string
                  example: 'Рис, лосось, кунжут'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
                needPersonCount:
                  type: bool
                  example: true
                hasStop:
                  type: bool
                  example: true
                type:
                  type: string
                  example: single
                hide:
                  type: bool
                  example: false
                souseId:
                  type: int
                  example: 2
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Эллементы меню'
      summary: 'Удалить эллемент меню'
      description: 'Удаляет эллемент меню и вовзращает результат'
      operationId: CategoryDelete
      parameters:
        - name: id
          in: path
          description: 'id эллмента меню'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json


  /modifications:
    get:
      tags:
        - 'Модификации эллементов меню'
      summary: 'Получить модификации эллементов меню'
      description: 'Возвращает модификации эллемнтов меню, принимает параметры сортировки'
      operationId: CategoriesIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/modification/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Модификации эллементов меню'
      summary: 'Создать модификацию эллементов меню'
      description: |
        'Создаёт модификацию эллементов меню и возвращает id'
        <br><br><br>Параметр *action* принимает следующие значения:
        <br><br>***subtract***
        <br><br>***add***  //*при экшене добавить должна быть указа техническая карта*
        <br><br>***replace***  //*при экшене реплейс должна быть указа техническая карта*
        <br><br>***construct***
        <br><br><br>Параметр *type* принимает следующие значения:
        <br><br>***single***
        <br><br>***select***
      operationId: ModificationCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Сырный бортик
                description:
                  type: string
                  example: 'Очень сырно!'
                action:
                  type: string
                  example: 'add'
                type:
                  type: string
                  example: 'single'
                priceAdd:
                  type: string
                  example: '100'
                priceRate:
                  type: string
                  example: '1.5'
                nameOn:
                  type: string
                  example: ' c сырным бортиком'
                nameOff:
                  type: string
                  example: ' ржаная корка'
                technicalCardId:
                  type: int
                  example: 1
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/modifications/{id}':
    get:
      tags:
        - 'Модификации эллементов меню'
      summary: 'Получить модификацию эллементов меню'
      description: 'Get modification data'
      operationId: ModificationOne
      parameters:
        - name: id
          in: path
          description: 'id модификации'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/modification/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Модификации эллементов меню'
      summary: 'Обновить модификацию'
      description: |
        Обновляет модификацию и возвращает результат
        <br><br><br>Параметр *action* принимает следующие значения:
        <br><br>***subtract***
        <br><br>***add***  //*при экшене добавить должна быть указа техническая карта*
        <br><br>***replace***  //*при экшене реплейс должна быть указа техническая карта*
        <br><br>***construct***
        <br><br><br>Параметр *type* принимает следующие значения:
        <br><br>***single***
        <br><br>***select***
      operationId: ModificationUpdate
      parameters:
        - name: id
          in: path
          description: 'id модификации'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Сырный бортик
                description:
                  type: string
                  example: 'Очень сырно!'
                action:
                  type: string
                  example: 'add'
                type:
                  type: string
                  example: 'single'
                priceAdd:
                  type: string
                  example: '100'
                priceRate:
                  type: string
                  example: '1.5'
                nameOn:
                  type: string
                  example: ' c сырным бортиком'
                nameOff:
                  type: string
                  example: ' ржаная корка'
                technicalCardId:
                  type: int
                  example: 1
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Модификации эллементов меню'
      summary: 'Удалить модификацию'
      description: 'Удаляет модификацию и возвращает результат'
      operationId: ModificationDelete
      parameters:
        - name: id
          in: path
          description: 'id модификации'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /technicalCards:
    get:
      tags:
        - 'Технические карты'
      summary: 'Получить технические карты'
      description: 'Возвращет все технические карты, принимает параметры сортировки'
      operationId: TechnicalCardsIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/tech_cards/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Технические карты'
      summary: 'Создать техническую карту'
      description: 'Создаёт техническую карту и возвращает id'
      operationId: CategoryCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Суши
                weight:
                  type: int
                  example: '500'
                proteins:
                  type: int
                  example: '300'
                fats:
                  type: int
                  example: '50'
                carbohydrates:
                  type: int
                  example: '200'
                calories:
                  type: int
                  example: '180'
                composition:
                  type: int
                  example: 'Рыба, рис, огурец'
                compositionForCook:
                  type: int
                  example: 'Рис и рыба и готовить'
                chefComment:
                  type: int
                  example: 'Смешай то то с тем то'
                cookingType:
                  type: int
                  example: 'baked'
                dishType:
                  type: int
                  example: 'roll'
                manufacturerType:
                  type: int
                  example: 'hot'
                termTime:
                  type: int
                  example: 10
                timeToCool:
                  type: int
                  example: 180
                cookingTime:
                  type: int
                  example: 20
                hasTerm:
                  type: bool
                  example: true
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/technicalCards/{id}':
    get:
      tags:
        - 'Технические карты'
      summary: 'Получить  техническую карту'
      description: 'Возвращает данные о тех.карте'
      operationId: CategoryOne
      parameters:
        - name: id
          in: path
          description: 'id Тех карты'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/tech_cards/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Технические карты'
      summary: 'Обновить тех. карту'
      description: 'Обновляет тех карту и возвращает результат'
      operationId: TechCardUpdate
      parameters:
        - name: id
          in: path
          description: 'id Тех карты'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Суши
                weight:
                  type: int
                  example: '500'
                proteins:
                  type: int
                  example: '300'
                fats:
                  type: int
                  example: '50'
                carbohydrates:
                  type: int
                  example: '200'
                calories:
                  type: int
                  example: '180'
                composition:
                  type: string
                  example: 'Рыба, рис, огурец'
                compositionForCook:
                  type: string
                  example: 'Рис и рыба и готовить'
                chefComment:
                  type: string
                  example: 'Смешай то то с тем то'
                cookingType:
                  type: int
                  example: 'baked'
                dishType:
                  type: int
                  example: 'roll'
                manufacturerType:
                  type: int
                  example: 'hot'
                termTime:
                  type: int
                  example: 10
                timeToCool:
                  type: int
                  example: 180
                cookingTime:
                  type: int
                  example: 20
                hasTerm:
                  type: bool
                  example: true
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Технические карты'
      summary: 'Удалить тех карту'
      description: 'Удаляет тех карту и возвращает результат'
      operationId: CategoryDelete
      parameters:
        - name: id
          in: path
          description: 'id Тех карты'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /filials:
    get:
      tags:
        - 'Филиалы'
      summary: 'Получить список всех филиалов'
      description: 'Получить список всех филиалов с параметрами пагинации'
      operationId: FilialsIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ со списком филиалов'
          content:
            application/json:
              examples:
                - $ref: ../api-example/filials/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Филиалы'
      summary: 'Создать новый филиал'
      description: 'Создаёт филиал и возвращает индификатор(id)'
      operationId: FilialCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Филиал на Маршакова
                city:
                  type: string
                  example: Санкт-петербург
                address:
                  type: string
                  example: ул.Маршакова д.21
                requisites:
                  type: string
                  example: null
                let:
                  type: string
                  example: 55.12312312
                lat:
                  type: string
                  example: 51.2424123
                workPhone:
                  type: string
                  example: 79999999999
                minOrderCost:
                  type: string
                  example: 0
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
                settings:
                  type: bool
                  example: [ { "settingId": 1,"value": "testValue" },{ "settingId": 2,"value": { "test_1": "ok","test_2": "false" } } ]
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /filials/{id}:
    get:
      tags:
        - 'Филиалы'
      summary: 'Получить информацию о филиале'
      description: 'Возвращает информацию о филиале по индефикатору'
      operationId: FilialOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор филиала'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/filials/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Филиалы'
      summary: 'Обновить филиал'
      description: 'Обновляет филиал и возвращает результат'
      operationId: FilialUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор филиала'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Филиал на Маршакова
                city:
                  type: string
                  example: Санкт-петербург
                address:
                  type: string
                  example: ул.Маршакова д.21
                requisites:
                  type: string
                  example: null
                let:
                  type: string
                  example: 55.12312312
                lat:
                  type: string
                  example: 51.2424123
                workPhone:
                  type: string
                  example: 79999999999
                minOrderCost:
                  type: string
                  example: 0
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true

                settings:
                  type: bool
                  example: [ { "settingId": 1,"value": "testValue" },{ "settingId": 2,"value": { "test_1": "ok","test_2": "false" } } ]
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Филиалы'
      summary: 'Удалить филиал'
      description: 'Удаляет филиал и возвращает результат удаления'
      operationId: FilialDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор филиала'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json


  /getSetting:
    get:
      tags:
        - 'Стандартные настройки филиалов'
      summary: 'Получить настройку по параметрам фильтрации'
      description: 'Получить настройку по параметрам фильтрации'
      operationId: getSettingByCondition
      parameters:
        - name: filialId
          in: query
          description: 'Фильтрация по филилам'
          required: false
          schema:
            type: int
        - name: key
          in: query
          description: 'Фильтрация по ключу'
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: 'Фильтрация по имени'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ со списком настроек'
          content:
            application/json:
              examples:
                - $ref: ../api-example/filials_default_settings/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /settings:
    get:
      tags:
        - 'Стандартные настройки филиалов'
      summary: 'Получить список всех настроек'
      description: 'Получить список всех настроек с параметрами пагинации'
      operationId: FilialDefaultsIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
        - name: filialId
          in: query
          description: 'Фильтрация по филилам'
          required: false
          schema:
            type: int
        - name: key
          in: query
          description: 'Фильтрация по ключу'
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: 'Фильтрация по имени'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ со списком настроек'
          content:
            application/json:
              examples:
                - $ref: ../api-example/filials_default_settings/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Стандартные настройки филиалов'
      summary: 'Создать новую настройку'
      description: 'Создаёт настройку и возвращает индификатор(id)'
      operationId: FilialDefaultCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: test
                key:
                  type: string
                  example: 123
                group:
                  type: string
                  example: группа
                value:
                  type: string
                  example: текст настройки
                json:
                  type: bool
                  example: false
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /settings/{id}:
    get:
      tags:
        - 'Стандартные настройки филиалов'
      summary: 'Получить информацию о настойки'
      description: 'Возвращает информацию о настройки по индефикатору'
      operationId: FilialDefaultOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор настройки'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/filials_default_settings/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Стандартные настройки филиалов'
      summary: 'Обновить настройку'
      description: 'Обновляет настройку и возвращает результат'
      operationId: FilialDefaultUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор настройки'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: test
                key:
                  type: string
                  example: 123
                group:
                  type: string
                  example: группа
                value:
                  type: string
                  example: текст настройки
                json:
                  type: bool
                  example: false
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Стандартные настройки филиалов'
      summary: 'Удалить настройку'
      description: 'Удаляет настройку и возвращает результат удаления'
      operationId: FilialDefaultDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор настройки'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /polygons:
    get:
      tags:
        - 'Полигоны'
      summary: 'Получить список всех полигонов'
      description: 'Получить список всех полигонов с параметрами пагинации'
      operationId: PolygonsIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ со списком полигонов'
          content:
            application/json:
              examples:
                - $ref: ../api-example/polygons/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Полигоны'
      summary: 'Создать новый полигон'
      description: 'Создаёт полигон и возвращает индификатор(id)'
      operationId: PolygonCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Полигон для бесплатной доставки
                filialId:
                  type: int
                  example: 1
                points:
                  type: array
                  example: [[60.03744674638565, 30.101027534926757],[59.962641846838494, 30.66265922355673],[59.66043639143857, 30.08403355417487],[60.03744674638565, 30.101027534926757]]
                price:
                  type: int
                  example: 150
                time:
                  type: string
                  example: "01:30:00"
                freeFromPrice:
                  type: int
                  example: 2000
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /polygons/{id}:
    get:
      tags:
        - 'Полигоны'
      summary: 'Получить информацию о полигоне'
      description: 'Возвращает информацию о полигоне по индефикатору'
      operationId: PolygonOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор полигона'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/polygons/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Полигоны'
      summary: 'Обновить полигон'
      description: 'Обновляет полигон и возвращает результат'
      operationId: PolygonUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор полигона'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Полигон для бесплатной доставки
                filialId:
                  type: int
                  example: 1
                points:
                  type: array
                  example: [[60.03744674638565, 30.101027534926757],[59.962641846838494, 30.66265922355673],[59.66043639143857, 30.08403355417487],[60.03744674638565, 30.101027534926757]]
                price:
                  type: int
                  example: 150
                time:
                  type: string
                  example: "01:30:00"
                freeFromPrice:
                  type: int
                  example: 2000
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Полигоны'
      summary: 'Удалить полигон'
      description: 'Удаляет полигон и возвращает результат удаления'
      operationId: PolygonDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор полигона'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /baskets:
    get:
      tags:
        - 'Корзины'
      summary: 'Получить список всех корзин'
      description: 'Получить список всех корзин с параметрами пагинации'
      operationId: BasketsIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ со списком корзин'
          content:
            application/json:
              examples:
                - $ref: ../api-example/basket/basket_data.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Корзины'
      summary: 'Создать новый корзину'
      description: 'Создаёт корзину и возвращает индификатор(id)'
      operationId: BasketCreate
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                clientId:
                  type: string
                  example: 1
                promoCode:
                  type: string
                  example: VSE 10
                persons:
                  type: int
                  example: 4
                comment:
                  type: string
                  example: Правый ролл слева без сыра
                clientAddressId:
                  type: int
                  example: 1
                dateDelivery:
                  type: string
                  example: "2021-02-15"
                timeDelivery:
                  type: string
                  example: 22-00
                paymentType:
                  type: string
                  example: terminal
                deliveryType:
                  type: string
                  example: delivery
                clientMoney:
                  type: int
                  example: 2000
                filialId:
                  type: int
                  example: 1
                callPhone:
                  type: int
                  example: 89228109900
                items:
                  type: string
                  example:  [ { "menuItemId": "1","type": "construct","subMenuItemId": "2","comment": " коммент" },{"menuItemId": "2" , "comment": "test comment", "modificationMenuItemId": "2"} ]
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /baskets/{id}:
    get:
      tags:
        - 'Корзины'
      summary: 'Получить информацию о корзине'
      description: 'Возвращает информацию о корзине по индефикатору'
      operationId: BasketOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/basket/basket_data.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Корзины'
      summary: 'Обновить корзину'
      description: 'Обновляет корзину и возвращает результат'
      operationId: BasketUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                callPhone:
                  type: int
                  example: 89228109900
                paymentPhone:
                  type: string
                  example: 798221241412412
                promoCode:
                  type: string
                  example: VSE 10
                persons:
                  type: int
                  example: 4
                comment:
                  type: string
                  example: Правый ролл слева без сыра
                clientAddressId:
                  type: int
                  example: 1
                dateDelivery:
                  type: string
                  example: "2021-02-15"
                timeDelivery:
                  type: string
                  example: 22-00
                paymentType:
                  type: string
                  example: terminal
                deliveryType:
                  type: string
                  example: delivery
                clientMoney:
                  type: int
                  example: 2000
                filialId:
                  type: int
                  example: 1
                items:
                  type: string
                  example:  [ { "menuItemId": "1","type": "construct","subMenuItemId": "2","comment": " коммент" },{"menuItemId": "2" , "comment": "test comment", "modificationMenuItemId": "2"} ]
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Корзины'
      summary: 'Удалить корзину'
      description: 'Удаляет корзину и возвращает результат удаления'
      operationId: BasketDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /baskets/{id}/changeCourier:
    patch:
      tags:
        - 'Корзины'
      summary: 'Изменить адрес и время доставки'
      description: 'Возвращает актуальное состояние корзины'
      operationId: changeCourierBasket
      parameters:
        - name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                clientAddressId:
                  type: integer
                  example: '10'
                dateDelivery:
                  type: string
                  example: '10.12.2020'
                timeDelivery:
                  type: string
                  example: '15:00 - 17:00'
                toDatetime:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/invalid_data.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/{id}/changeOnYandexDelivery:
    patch:
      tags:
        - 'Корзины'
      summary: 'Изменить доставку на курьеров яндекса'
      description: 'Изменить доставку на курьеров яндекса'
      operationId: changeOnYandexDelivery
      parameters:
        - name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/invalid_data.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/{id}/changeOnDeliveryClub:
    patch:
      tags:
        - 'Корзины'
      summary: 'Изменить доставку на курьеров деливери клаб'
      description:  'Изменить доставку на курьеров деливери клаб'
      operationId: changeOnDeliveryClub
      parameters:
        - name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/invalid_data.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/{id}/changePickup:
    patch:
      tags:
        - 'Корзины'
      summary: 'Изменить адрес самовывоза'
      description: 'Возвращает актуальное состояние корзины'
      operationId: changePickUpBasket
      parameters:
        - name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                filialId:
                  type: integer
                  example: '10'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/invalid_data.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/{id}/changePayment:
    patch:
      tags:
        - 'Корзины'
      summary: 'Изменить тип оплаты и сумму размена'
      description: 'Возвращает актуальное состояние корзины'
      operationId: changePaymentBasket
      parameters:
        - name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                paymentType:
                  type: string
                  example: 'cash'
                clientMoney:
                  type: integer
                  example: '1000'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/invalid_data.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/{id}/addPromoCode:
    patch:
      tags:
        - 'Корзины'
      summary: 'Изменить или добавить промокод'
      description: 'Возвращает актуальное состояние корзины'
      operationId: addPromocodeBasket
      parameters:
        - name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                promoCode:
                  type: string
                  example: 'NAVSE10'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/invalid_data.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/{id}/items:
    post:
      tags:
        - 'Корзины'
      summary:  'Добавить товар в корзину.'
      description:  |
         Добавить товар в корзину ,где ***type*** строка с одиним из значений:
         <br><br>-construct (наличные);
         <br>-usual (оплата по терминаналу);
      operationId: putItemInBasket
      parameters:
        - name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                menuItemId:
                  type: int
                  example: 1
                type:
                  type: string
                  example: usual
                subMenuItemId:
                  type: int
                  example: 2
                modificationId:
                  type: integer
                  example: 1
                comment:
                  type: string
                  example: "комментарий"
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        404:
          description: 'Товар не найден'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/not_found.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/invalid_request.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/items/{itemId}:
    patch:
      tags:
        - 'Корзины'
      summary: 'Обновить товар в корзине. Для увеличения количества товара и изменения модификаторов.'
      description: |
        Обновить товар в корзине ,где ***type*** строка с одиним из значений:
        <br><br>-construct (наличные);
        <br>-usual (оплата по терминаналу);
      operationId: editItemInBasket
      parameters:
        -
          name: 'itemId'
          in: path
          description: 'Внутрений индификатор эллемента корзины'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                menuItemId:
                  type: int
                  example: 1
                type:
                  type: string
                  example: usual
                subMenuItemId:
                  type: int
                  example: 2
                modificationId:
                  type: integer
                  example: 1
                comment:
                  type: string
                  example: "комментарий"
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        404:
          description: 'Товар не найден'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/not_found.json'
        422:
          description: 'Неверные данные'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/invalid_request.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
    delete:
      tags:
        - 'Корзины'
      summary: 'Удалить товар из корзины'
      description: 'Возвращает актуальное состояние корзины'
      operationId: deleteItemInBasket
      parameters:
        -
          name: 'itemId'
          in: path
          description: 'Внутрений индификатор эллемента'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        404:
          description: 'Товар не найден'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/not_found.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'
  /baskets/{id}/items/:
    delete:
      tags:
        - 'Корзины'
      summary: 'Удалить все товары из корзины'
      description: 'Возвращает актуальное состояние корзины'
      operationId: deleteItemsInBasket
      parameters:
        -
          name: 'id'
          in: path
          description: 'Внутрений индификатор корзины'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/basket/basket_data.json'
        500:
          description: 'Внутрение ошибка сервера'
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                item:
                  $ref: '../api-example/auth_fail.json'


  /orders:
    get:
      tags:
        - 'Заказы'
      summary: 'Получить список всех заказов'
      description: 'Получить список всех заказов с параметрами пагинации'
      operationId: OrdersIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
        - name: filialId
          in: query
          description: 'Id филиала для поиска'
          required: false
          schema:
            type: int
        - name: orderStatus
          in: query
          description: 'orderStatus для поиска'
          required: false
          schema:
            type: int
        - name: filterParam
          in: query
          description: 'Параметр для фильтрации из массива с фильтрами заказа'
          required: false
          schema:
            type: int
        -
          name: 'relations'
          in: query
          description: 'связи, что бы не тянуть лишнего, допустим "basket,courier,client", либо null без связей'
          required: false
          schema:
            type: string
        - name: date
          in: query
          description: '2020-03-01 для фильтра, по умолчанию сегодня'
          required: false
          schema:
            type: int
        - name: globalSearch
          in: query
          description: 'Текст для поиска поультип олям'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/order/order_data.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Заказы'
      summary: 'Создать новый заказ'
      description: 'Создаёт заказ и возвращает индификатор(id)'
      operationId: OrderCreate
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                basketId:
                  type: string
                  example: 1
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /order/getStatuses:
    get:
      tags:
        - 'Заказы'
      summary: 'Получить список со статусами заказов'
      description: 'Получить список со статусами заказов'
      operationId: ordersgetStatuses
      parameters:
        - name: date
          in: query
          description: '2020-03-01 для фильтра, по умолчанию сегодня'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/order/order_statuses.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /orders/{id}:
    get:
      tags:
        - 'Заказы'
      summary: 'Получить информацию о заказе'
      description: 'Возвращает информацию о заказе по индефикатору'
      operationId: OrderOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор заказа'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/order/order_data.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Заказы'
      summary: 'Обновить заказ'
      description: 'Обновляет заказ и возвращает результат'
      operationId: OrderUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор заказа'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                orderStatus:
                  type: string
                  example: 'preparing'
            type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Заказы'
      summary: 'Удалить заказ'
      description: 'Удаляет заказ и возвращает результат удаления'
      operationId: OrderDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор заказа'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /orders/{id}/sendLinkOnPayment:
    post:
      tags:
        - 'Заказы'
      summary: 'Отправить ссылку на оплату клиенту'
      description: 'Отправить ссылку на оплату клиенту'
      operationId: sendLinkOnPayment
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор заказа'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /orders/{id}/confirm:
    post:
      tags:
        - 'Заказы'
      summary: 'Потвердить заказ'
      description: 'Потвердить заказ'
      operationId: confirmStatus
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор заказа'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /orders/{id}/cancel:
    post:
      tags:
        - 'Заказы'
      summary: 'Отменить заказ'
      description: 'Отменить заказ'
      operationId: cancelStatus
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор заказа'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /orders/{id}/changeOnNextStatus:
    patch:
      tags:
        - 'Заказы'
      summary: 'Сменить статус заказа на следующий'
      description: 'Меняет статус заказа на следующий и возвращает результат'
      operationId: changeOnNextStatus
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор заказа'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /workSchedules:
    get:
      tags:
        - 'Графики работы'
      summary: 'Получить список всех графиков работ'
      description: 'Получить список всех графиков работ с параметрами пагинации'
      operationId: WorkSchedulesIndex
      parameters:
        - name: date
          in: query
          description: 'дата(Y-m-d 2021-02-23)'
          required: false
          schema:
            type: string
        - name: filialId
          in: query
          description: 1
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ со списком графиков работ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/workSchedules/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Графики работы'
      summary: 'Создать новый график работы'
      description: |
        'Создаёт график работы и возвращает индификатор(id)'
         ,где ***shiftTime*** строка с одиним из значений:
                   <br><br>-full (Полная смена);
                   <br>-half (Часть смены);
                   <br>-offDay (Выходной);
      operationId: WorkScheduleCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: int
                  example: 1
                workSpaceId:
                  type: int
                  example: 1
                shiftTime:
                  type: string
                  example: full
                begin:
                  type: string
                  example: '12:00'
                end:
                  type: string
                  example: '19:00'
                date:
                  type: string
                  example: '2021-02-08'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /workSchedules/{id}:
    get:
      tags:
        - 'Графики работы'
      summary: 'Получить информацию о графики работы'
      description: 'Возвращает информацию о графики работы по индефикатору'
      operationId: WorkScheduleOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор графика работы'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/workSchedules/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Графики работы'
      summary: 'Обновить график работы'
      description: |
        'Обновляет график работы и возвращает результат'
        ,где ***shiftTime*** строка с одиним из значений:
                  <br><br>-full (Полная смена);
                  <br>-first (первая смена);
                  <br>-second (вторая смена);
                  <br>-offDay (Выходной);
      operationId: WorkScheduleUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор графика работы'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                shiftTime:
                  type: string
                  example: full
                workSpaceId:
                  type: int
                  example: 1
                begin:
                  type: string
                  example: '12:00'
                end:
                  type: string
                  example: '19:00'
                date:
                  type: string
                  example: '2021-02-08'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

    delete:
      tags:
        - 'Графики работы'
      summary: 'Удалить график работы'
      description: 'Удаляет график работы и возвращает результат удаления'
      operationId: WorkScheduleDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор графика работы'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /workSchedules/getScheme/{filialId}:
    get:
      tags:
        - 'Графики работы'
      summary: 'Получить схему для заполнения'
      description: 'Получить схему для заполнения'
      operationId: getSchemeForEmptyDay
      parameters:
        - name: filialId
          in: path
          description: 'Внутрений индификатор филиала'
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: 'Дата в формате Y-m-d 2021-02-26'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/workSchedules/getSchemeForEmptyDay.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /workSchedule/getCountStaffByDate :
    get:
      tags:
        - 'Графики работы'
      summary: 'Получить колличество персонала в переиод месяца'
      description: 'Получить колличество персонала в переиод месяца'
      operationId: getCountStaffByDate
      parameters:
        - name: filialId
          in: query
          description: 'Id филиала'
          required: false
          schema:
            type: int
        - name: date
          in: query
          description: 'Месяц в формате unixtime'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/workSchedules/getSchemeForEmptyDay.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /workSchedules/setDay:
    post:
      tags:
        - 'Графики работы'
      summary: 'Заполнить рабочий день по схеме'
      description: 'Заполнить рабочий день по схеме'
      operationId: setDay
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                items:
                  type: string
                  example: [{ "shiftTime": "full","workSpaceId" : 1,"userId" : 1},{ "shiftTime": "full","workSpaceId" : 1,"userId" : 1}]
                date:
                  type: string
                  example: "2021.02.19"
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/workSchedules/getSchemeForEmptyDay.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /workSpaces:
    get:
      tags:
        - 'Рабочие места'
      summary: 'Получить список всех рабочих мест'
      description: 'Получить список всех рабочих мест с параметрами пагинации'
      operationId: WorkSpacesIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ со списком рабочих мест'
          content:
            application/json:
              examples:
                - $ref: ../api-example/workSpaces/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Рабочие места'
      summary: 'Создать новое рабочее место'
      description: |
        'Создаёт рабочее место и возвращает индификатор(id)'
      operationId: WorkSpaceCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                filialId:
                  type: int
                  example: 1
                roleId:
                  type: int
                  example: 1
                name:
                  type: string
                  example: Администратор
                description:
                  type: string
                  example: '12:00'
                phoneAccount:
                  type: string
                  example: '89999999999'
                additionalInfo:
                  type: string
                  example: '{"phone"} : "89999999999"'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /workSpaces/{id}:
    get:
      tags:
        - 'Рабочие места'
      summary: 'Получить информацию о рабочем месте'
      description: 'Возвращает информацию о рабочем месте по индефикатору'
      operationId: WorkSpaceOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор рабочего места'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/workSpaces/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Рабочие места'
      summary: 'Обновить рабочее место'
      description: |
        'Обновляет рабочее место и возвращает результат'
      operationId: WorkSpaceUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор рабочего места'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                filialId:
                  type: int
                  example: 1
                roleId:
                  type: int
                  example: 1
                name:
                  type: Администратор
                  example: full
                description:
                  type: string
                  example: '12:00'
                additionalInfo:
                  type: string
                  example: '{"phone"} : "89999999999"'
                phoneAccount:
                  type: string
                  example: '89999999999'
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Рабочие места'
      summary: 'Удалить рабочее место'
      description: 'Удаляет рабочее место и возвращает результат удаления'
      operationId: WorkSpaceDelete
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор рабочего места'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json


  /transactions:
    get:
      tags:
        - 'Транзакции'
      summary: 'Получить список всех транзакций'
      description: 'Получить список всех транзакций с параметрами пагинации'
      operationId: TransactionsIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ со списком транзакций'
          content:
            application/json:
              examples:
                - $ref: ../api-example/transactions/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Транзакции'
      summary: 'Создать новый транзакцию'
      description: 'Создаёт транзакцию и возвращает индификатор(id)'
      operationId: TransactionCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                courierId:
                  type: int
                  example: 1
                price:
                  type: int
                  example: 150
                quantityChecks:
                  type: int
                  example: 2
                paymentType:
                  type: int
                  example: terminal
                operationType:
                  type: int
                  example: terminal
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /transactions/{id}:
    get:
      tags:
        - 'Транзакции'
      summary: 'Получить информацию о транзакции'
      description: 'Возвращает информацию о транзакции по индефикатору'
      operationId: TransactionOne
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор транзакции'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/transactions/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Транзакции'
      summary: 'Обновить транзакцию'
      description: 'Обновляет транзакцию и возвращает результат'
      operationId: TransactionUpdate
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор транзакции'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        content:
          application/json:
            schema:
              properties:
                price:
                  type: int
                  example: 150
                quantityChecks:
                  type: int
                  example: 2
                paymentType:
                  type: int
                  example: terminal
                operationType:
                  type: int
                  example: send
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /transactions/{id}/wait:
    patch:
      tags:
        - 'Транзакции'
      summary: 'Перевести транзакцию в режим ожидания'
      description: 'Перевести транзакцию в режим ожидания'
      operationId: waitTransaction
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор транзакции'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /transactions/{id}/canceled:
    patch:
      tags:
        - 'Транзакции'
      summary: 'Отменить транзакцию'
      description: 'Отменить транзакцию'
      operationId: TransactionCanceled
      parameters:
        - name: id
          in: path
          description: 'Внутрений индификатор транзакции'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /promoCodes:
    get:
      tags:
        - 'Промокоды'
      summary: 'Получить список Промокодов'
      description: 'Вовзращает список Промокодов, может принимать параметры пагинации'
      operationId: promoCodesIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: string
        - name: findName
          in: query
          description: 'поиск по имени'
          required: false
          schema:
            type: string
        - name: findCode
          in: query
          description: 'поиск по коду'
          required: false
          schema:
            type: string

      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/promocode/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Промокоды'
      summary: 'Создать промокод'
      description: |
        Создаёт промокод и возвращает id
        ,где ***action*** строка с одиним из значений:
                <br><br>-dishGift (блюдо в подарок, при этом значенние должны быть заполненены menuItemId);
                <br>-doubling (удваение заказа);
                <br>-subtract (скидка в рублях);
                <br>-percent (скидка в процентах);
        ,где ***type*** строка с одиним из значений:
                <br><br>-all (для всех);
                <br>-personal (персональные скидки);
      operationId: PromocodeCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'С днём рождения!'
                description:
                  type: string
                  example: 'С днём рождения!'
                code:
                  type: string
                  example: 'BIRTHDAY'
                type:
                  type: string
                  example: 'personal'
                action:
                  type: string
                  example: 'BirthDay'
                salePercent:
                  type: int
                  example: 20
                saleSubtraction:
                  type: int
                  example: 30000
                timeOn:
                  type: int
                  example: 30000
                timeEnd:
                  type: int
                  example: 30000
                showMenu:
                  type: int
                  example: 0
                saleMenuItemId:
                  type: int
                  example: null
                saleModificationMenuItemId:
                  type: int
                  example: null
                onlyFirstOrder:
                  type: int
                  example: 0
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
                daysForActive:
                  type: int
                  example: 5
                repeat:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/promoCodes/{id}':
    get:
      tags:
        - 'Промокоды'
      summary: 'Получить промокод'
      description: 'Возвращает промокод по id'
      operationId: PromocodeOne
      parameters:
        - name: id
          in: path
          description: 'id promocode'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/promocode/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Промокоды'
      summary: 'Обновить промокод'
      description: |
        Обновляет  промокод и возвращает id
        ,где ***action*** строка с одиним из значений:
                <br><br>-dishGift (блюдо в подарок, при этом значенние должны быть заполненены menuItemId);
                <br>-doubling (удваение заказа);
                <br>-subtract (скидка в рублях);
                <br>-percent (скидка в процентах);
        ,где ***type*** строка с одиним из значений:
                <br><br>-all (для всех);
                <br>-personal (персональные скидки);
      operationId: PromocodeUpdate
      parameters:
        - name: id
          in: path
          description: 'id промокода'
          required: false
          unique: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'С днём рождения!'
                description:
                  type: string
                  example: 'С днём рождения!'
                code:
                  type: string
                  example: 'BIRTHDAY'
                type:
                  type: string
                  example: 'personal'
                action:
                  type: string
                  example: 'BirthDay'
                salePercent:
                  type: int
                  example: 20
                saleSubtraction:
                  type: int
                  example: 30000
                timeOn:
                  type: int
                  example: 30000
                timeEnd:
                  type: int
                  example: 30000
                showMenu:
                  type: int
                  example: 0
                saleMenuItemId:
                  type: int
                  example: null
                saleModificationMenuItemId:
                  type: int
                  example: null
                onlyFirstOrder:
                  type: int
                  example: 0
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
                daysForActive:
                  type: int
                  example: 5
                repeat:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Промокоды'
      summary: 'Удалить промокод'
      description: 'Удаляет промокод и возвращает результат'
      operationId: PromocodeDelete
      parameters:
        - name: id
          in: path
          description: 'id промокода'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /promotions:
    get:
      tags:
        - 'Промо акции'
      summary: 'Получить список Промо акций'
      description: 'Вовзращает список Промо акций, может принимать параметры пагинации'
      operationId: promotionsIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: string
        - name: findName
          in: query
          description: 'поиск по имени'
          required: false
          schema:
            type: string


      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/promotion/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Промо акции'
      summary: 'Создать Промо акцию'
      description: |
        Создаёт Промо акцию и возвращает id
      operationId: PromotionCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                promoCodeId:
                  type: int
                  example: 1
                name:
                  type: string
                  example: Суши
                sub_name:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: susi
                image:
                  type: string
                  example: path/to/server/image.jpg
                mobileImage:
                  type: string
                  example: path/to/server/image.jpg
                color:
                  type: string
                  example: green
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                textOne:
                  type: string
                  example: 'metaDescription'
                textTwo:
                  type: string
                  example: 'metaDescription'
                imgBgrColor:
                  type: string
                  example: 'metaDescription'
                dateBegin:
                  type: string
                  example: '22-10-10'
                dateEnd:
                  type: string
                  example: '22-11-10'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/promotions/{id}':
    get:
      tags:
        - 'Промо акции'
      summary: 'Получить Промо акцию'
      description: 'Возвращает Промо акцию по id'
      operationId: PromotionOne
      parameters:
        - name: id
          in: path
          description: 'id promotions'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/promotion/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Промо акции'
      summary: 'Обновить Промо акцию'
      description: |
        Обновляет  Промо акцию и возвращает id
      operationId: PromotionUpdate
      parameters:
        - name: id
          in: path
          description: 'id промо акции'
          required: false
          unique: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                promoCodeId:
                  type: int
                  example: 1
                name:
                  type: string
                  example: Суши
                sub_name:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: susi
                image:
                  type: string
                  example: path/to/server/image.jpg
                mobileImage:
                  type: string
                  example: path/to/server/image.jpg
                color:
                  type: string
                  example: green
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                textOne:
                  type: string
                  example: 'metaDescription'
                textTwo:
                  type: string
                  example: 'metaDescription'
                imgBgrColor:
                  type: string
                  example: 'metaDescription'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                dateBegin:
                  type: string
                  example: '22-10-10'
                dateEnd:
                  type: string
                  example: '22-11-10'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Промо акции'
      summary: 'Удалить Промо акцию'
      description: 'Удаляет Промо акцию и возвращает результат'
      operationId: PromotionDelete
      parameters:
        - name: id
          in: path
          description: 'id промо акции'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /news:
    get:
      tags:
        - 'Новости'
      summary: 'Получить список новостей'
      description: 'Вовзращает список новостей, может принимать параметры пагинации'
      operationId: newsIndex
      parameters:
        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: string
        - name: findName
          in: query
          description: 'поиск по имени'
          required: false
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/news/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Новости'
      summary: 'Создать новость'
      description: |
        Создаёт новость и возвращает id
      operationId: NewsCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                promoCodeId:
                  type: int
                  example: 1
                name:
                  type: string
                  example: Суши
                subName:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: susi
                image:
                  type: string
                  example: path/to/server/image.jpg
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                descriptionBeforePromoCode:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                descriptionAfterPromoCode:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                date:
                  type: string
                  example: '22-10-10'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/news/{id}':
    get:
      tags:
        - 'Новости'
      summary: 'Получить новость'
      description: 'Возвращает новость по id'
      operationId: NewsOne
      parameters:
        - name: id
          in: path
          description: 'id news'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/news/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Новости'
      summary: 'Обновить новость'
      description: |
        Обновляет  новость и возвращает id
      operationId: NewsUpdate
      parameters:
        - name: id
          in: path
          description: 'id новости'
          required: false
          unique: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                promoCodeId:
                  type: int
                  example: 1
                name:
                  type: string
                  example: Суши
                sub_name:
                  type: string
                  example: Суши
                slug:
                  type: string
                  example: susi
                image:
                  type: string
                  example: path/to/server/image.jpg
                description:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                descriptionBeforePromoCode:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                descriptionAfterPromoCode:
                  type: string
                  example: 'Очень вкусные суши для вас!'
                h1:
                  type: string
                  example: 'h1'
                metaTitle:
                  type: string
                  example: 'metaTitle'
                metaDescription:
                  type: string
                  example: 'metaDescription'
                date:
                  type: string
                  example: '22-10-10'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Новости'
      summary: 'Удалить новость'
      description: 'Удаляет новость и возвращает результат'
      operationId: NewsDelete
      parameters:
        - name: id
          in: path
          description: 'id новости'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json


  /sliders:
    get:
      tags:
        - 'Слайдеры'
      summary: 'Получить список слайдеров'
      description: 'Возвращает список слайдеров с параметрами пагинациями'
      operationId: CategoriesIndex
      parameters:

        - name: limit
          in: query
          description: 'задать лимит записей'
          required: false
          schema:
            type: int
        - name: offset
          in: query
          description: 'задать точку отсчёта записей'
          required: false
          schema:
            type: int
        - name: page
          in: query
          description: 'задать страницу'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/slider/list.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    post:
      tags:
        - 'Слайдеры'
      summary: 'Создать слайдер'
      description: 'Создаёт слайдер и возвращает id'
      operationId: SliderCreate
      requestBody:
        description: 'Пример запроса'
        required: true
        unique: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Суши
                color:
                  type: string
                  example: "#34252234"
                desktopImage:
                  type: string
                  example: path/to/server/image1.jpg
                mobileImage:
                  type: string
                  example: path/to/server/image2.jpg
                link:
                  type: string
                  example: 'https://test.ru'
                target:
                  type: string
                  example: 'home'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/create.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  '/sliders/{id}':
    get:
      tags:
        - 'Слайдеры'
      summary: 'Получить слайдер по id'
      description: 'Возвращает данные слайдера'
      operationId: SliderOne
      parameters:
        - name: id
          in: path
          description: 'id слайдера'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/slider/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    put:
      tags:
        - 'Слайдеры'
      summary: 'Изменить слайдер'
      description: 'Изменяет слайдер и возвращает ответ'
      operationId: SliderUpdate
      parameters:
        - name: id
          in: path
          description: 'id слайдера'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Пример запроса'
        required: false
        unique: false
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Суши
                color:
                  type: string
                  example: "#34252234"
                desktopImage:
                  type: string
                  example: path/to/server/image1.jpg
                mobileImage:
                  type: string
                  example: path/to/server/image2.jpg
                link:
                  type: string
                  example: 'https://test.ru'
                target:
                  type: string
                  example: 'home'
                sortOrder:
                  type: int
                  example: '1'
                status:
                  type: bool
                  example: true
              type: object
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/edit.json
        422:
          description: 'Неправильные данные'
          content:
            application/json:
              examples:
                - $ref: ../api-example/invalid_request.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
    delete:
      tags:
        - 'Слайдеры'
      summary: 'Удалить слайдер'
      description: 'Удаляет слайдер и возвращает ответ'
      operationId: SliderDelete
      parameters:
        - name: id
          in: path
          description: 'id слайдера'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/curd/delete.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /administrator/getShortInfo:
    get:
      tags:
        - 'Администрирование'
      summary: 'Получить краткую информацию'
      description: 'Возвращает краткую иноформацию'
      operationId: getShortInfo
      parameters:
        - name: filialId
          in: query
          description: 'Фильтрация по филилам'
          required: true
          schema:
            type: int
        - name: date
          in: query
          description: '2020-03-01 для фильтра, по умолчанию сегодня'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/admin/getShortInfo.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

  /administrator/getBalance:
    get:
      tags:
        - 'Администрирование'
      summary: 'Получить баланс филиала'
      description: 'Возвращает баланс филиала'
      operationId: getBalance
      parameters:
        - name: filialId
          in: query
          description: 'Фильтрация по филилам'
          required: false
          schema:
            type: int
        - name: date
          in: query
          description: '2020-03-01 для фильтра, по умолчанию сегодня'
          required: false
          schema:
            type: int
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/admin/balance.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /administrator/openWorkDay:
    post:
      tags:
        - 'Администрирование'
      summary: 'Получить баланс филиала'
      description: 'Возвращает баланс филиала'
      operationId: openWorkDay
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/filials/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json
  /administrator/closeWorkDay:
    post:
      tags:
        - 'Администрирование'
      summary: 'Получить баланс филиала'
      description: 'Возвращает баланс филиала'
      operationId: closeWorkDay
      responses:
        200:
          description: 'Успешный ответ'
          content:
            application/json:
              examples:
                - $ref: ../api-example/filials/one.json
        401:
          description: Неавторизованный
          content:
            application/json:
              examples:
                - $ref: ../api-example/auth_fail.json
        403:
          description: 'Не разрешено! В доступе отказано'
          content:
            application/json:
              examples:
                - $ref: ../api-example/access_denied.json

tags:
  - name: 'Авторизация пользователя'
  - name: 'Права доступа'
  - name: 'Роли'
  - name: 'Загрузки'
  - name: 'Подсказки'
  - name: 'колбек'
  - name: 'Пользователи'
  - name: 'Клиенты'
  - name: 'Адреса клиентов'
  - name: 'Технические карты'
  - name: 'Категории меню'
  - name: 'Эллементы меню'
  - name: 'Модификации эллементов меню'
  - name: 'Коллекции меню'
  - name: 'Филиалы'
  - name: 'Стандартные настройки филиалов'
  - name: 'Полигоны'
  - name: 'Корзины'
  - name: 'Заказы'
  - name: 'Транзакции'
  - name: 'Графики работы'
  - name: 'Рабочие места'

