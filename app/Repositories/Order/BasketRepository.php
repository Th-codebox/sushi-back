<?php


namespace App\Repositories\Order;


use App\Enums\BasketItemType;
use App\Models\Order\Basket;

use App\Observers\Order\BasketObserver;
use App\Repositories\BaseRepository;
use App\Repositories\RepositoryException;
use Illuminate\Database\Eloquent\Builder;

/**
 * Class UserRepository
 * @package App\Repositories\System
 * @method  Basket getModel()
 */
class BasketRepository extends BaseRepository
{

    protected array $relations = ['utm', 'items', 'clientAddress', 'client', 'order', 'filial', 'clientPromoCode','call'];

    protected BasketObserver $basketObserver;

    /**
     * BasketRepository constructor.
     * @param Basket|null $model
     */
    public function __construct(?Basket $model = null)
    {

        if ($model === null) {
            $model = new Basket();
        }

        $this->basketObserver = new BasketObserver();

        parent::__construct($model);
    }

    /**
     * @return int
     */
    public function getId(): int
    {
        return $this->getModel()->id;
    }


    /**
     * @param array $data
     * @throws RepositoryException
     * @throws \ReflectionException
     * @throws \Throwable
     */
    protected function afterModification(array $data = []): void
    {
        if (array_key_exists('items', $data) && is_array($data['items'])) {
            $this->saveItems($data['items']);
        }
    }


    /**
     * @param array $items
     * @throws RepositoryException
     * @throws \Throwable
     */
    private function saveItems(array $items)
    {


        $this->getModel()->items->map(function ($item) {
            if (!$item->free) {
                (new BasketItemRepository($item))->delete();
            }
        });

        foreach ($items as $item) {
            try {
                (new BasketItemRepository())->add([
                    'basketId'               => $this->getModel()->id,
                    'menuItemId'             => $item['menuItemId'] ?? $item['menu_item_id'],
                    'subMenuItemId'          => $item['subMenuItemId'] ?? $item['sub_menu_item_id'] ?? null,
                    'modificationMenuItemId' => $item['modificationMenuItemId'] ?? $item['modification_id'] ?? $item['modification_id'] ?? null,
                    'type'                   => $item['type'] ?? BasketItemType::Usual,
                    'comment'                => $item['comment'] ?? null,
                ]);
            } catch (\Throwable $e) {

                throw new RepositoryException($e->getMessage());
            }
        }
    }

    protected function conditionsBuilder(array $conditions = []): Builder
    {
        $builder = parent::conditionsBuilder($conditions); // TODO: Change the autogenerated stub

        if (array_key_exists('clientId', $conditions) && !is_array($conditions['clientId'])) {
            $builder->where('client_id', '=', $conditions['clientId']);
        }
        if (array_key_exists('uuid', $conditions) && !is_array($conditions['uuid'])) {
            $builder->where('uuid', '=', $conditions['uuid']);
        }

        if (array_key_exists('basketSource', $conditions) && !is_array($conditions['basketSource'])) {
            $builder->where('basket_source', '=', $conditions['basketSource']);
        }


        return $builder;
    }


}
