<?php


namespace App\Repositories\System;

use App\Enums\RolePermissionType;
use App\Models\System\Role as RoleModel;
use App\Repositories\BaseRepository;
use Illuminate\Database\Eloquent\Builder;

/**
 * Class UserRepository
 * @package App\Repositories\System
 * @method RoleModel getModel()
 */
class RoleRepository extends BaseRepository
{
    protected array $relations = ['permissions'];

    /**
     * RoleRepository constructor.
     * @param RoleModel|null $model
     */
    public function __construct(RoleModel $model = null)
    {

        if ($model === null) {
            $model = new RoleModel();
        }

        parent::__construct($model);
    }

    protected function afterModification(array $data = []): void
    {
        if (array_key_exists('permissions', $data) && is_array($data['permissions'])) {
            $this->savePermissions($data['permissions']);
        }
    }

    /**
     * @param array $permissions
     */
    private function savePermissions(array $permissions)
    {
        $this->getModel()->permissions()->detach();

        foreach ($permissions as $permission) {

            $type = RolePermissionType::Filials;

            if (is_array($permission) && array_key_exists('type', $permission) && in_array($permission['type'], RolePermissionType::getValues())) {
                $type = $permission['type'];
            }

            if (is_array($permission) && array_key_exists('permissionId', $permission) && is_numeric($permission['permissionId']) && (int)$permission['permissionId'] > 0) {
                $this->getModel()->permissions()->attach($permission['permissionId'], ['type' => $type]);
            }
        }
    }

    protected function conditionsBuilder(array $conditions = []): Builder
    {
        $query = parent::conditionsBuilder($conditions); // TODO: Change the autogenerated stub

        return $query;
    }
}
