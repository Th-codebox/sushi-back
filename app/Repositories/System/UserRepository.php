<?php


namespace App\Repositories\System;


use App\Models\Store\Filial;
use App\Models\System\Permission;
use App\Models\System\User as UserModel;
use App\Repositories\BaseRepository;
use App\Repositories\RepositoryException;
use Illuminate\Database\Eloquent\Builder;

/**
 * Class UserRepository
 * @package App\Repositories\System
 * @method UserModel getModel()
 */
class UserRepository extends BaseRepository
{
    protected array $relations = ['filials', 'role', 'docs','transactions','workSchedules','orders'];

    /**
     * UserRepository constructor.
     * @param UserModel|null $model
     */
    public function __construct(UserModel $model = null)
    {

        if ($model === null) {
            $model = new UserModel();
        }

        parent::__construct($model);
    }

    public function calcBalance()
    {
        $this->getModel()->calcBalance();
    }

    /**
     * @param array $data
     * @throws RepositoryException
     */
    protected function afterModification(array $data = []): void
    {
        if (array_key_exists('filials', $data) && is_array($data['filials'])) {
            $this->saveFilials($data['filials']);
        }
        if (array_key_exists('docs', $data) && is_array($data['docs'])) {
            $this->saveDocs($data['docs']);
        }
    }

    /**
     * @return array
     */
    public function mapPermissions(): array
    {

        return $this->getModel()->role->permissions->map(function (Permission $permission) {
            return [
                'permissionId' => $permission->id,
                'actionName'   => $permission->namespace . '/' . $permission->controller . '@' . $permission->method,
                'name'         => $permission->name,
                'namespace'    => $permission->namespace,
                'controller'   => $permission->controller,
                'method'       => $permission->method,
                'group'        => $permission->group,
                'type'         => $permission->pivot->type,
            ];
        })->toArray();
    }


    /**
     * @return array
     */
    public function mapFilials(): array
    {

        return $this->getModel()->filials->map(function (Filial $filial) {
            return [
                'id'   => $filial->id,
                'name' => $filial->name,
            ];
        })->toArray();
    }

    /**
     * @return array
     */
    public function mapRole(): array
    {

        return  $this->getModel()->role->toArray();
    }


    /**
     * @param array $filials
     */
    private function saveFilials(array $filials)
    {
        $this->getModel()->filials()->detach();

        foreach ($filials as $filial) {

            try {
                if (is_array($filial) && array_key_exists('filialId', $filial) && is_numeric($filial['filialId']) && (int)$filial['filialId'] > 0) {
                    $this->getModel()->filials()->attach($filial['filialId']);
                }
            } catch (\Throwable $e) {
                throw new RepositoryException("Ошибка обновления - дубли или невалидные filialId");
            }

        }
    }

    /**
     * @param array $docs
     * @throws RepositoryException
     */
    private function saveDocs(array $docs)
    {

        $this->getModel()->docs->map(function ($item) {
            (new UserDocRepository($item))->delete();
        });

        foreach ($docs as $doc) {
            if (array_key_exists('path', $doc) && is_string($doc['path'])) {
                try {
                    (new UserDocRepository())->add([
                        'userId'      => $this->getModel()->id,
                        'name'        => $doc['name'],
                        'description' => $doc['description'] ?? null,
                        'group'       => $doc['group'] ?? null,
                        'path'        => $doc['path'],
                    ]);
                } catch (\Throwable $e) {
                    throw new RepositoryException($e->getMessage());
                }
            }

        }
    }


    protected function conditionsBuilder(array $conditions = []): Builder
    {
        $query = parent::conditionsBuilder($conditions); // TODO: Change the autogenerated stub

        if (array_key_exists('phone', $conditions) && is_string($conditions['phone'])) {
            $query->where('phone', '=', $conditions['phone']);
        }
        if (array_key_exists('filialId', $conditions) && is_numeric($conditions['filialId'])) {
            $query->whereHas('filials', function (\Illuminate\Database\Query\Builder $builder) use ($conditions){
                $builder->where('filial_id','=', $conditions['filialId']);
            });
        }
        if (array_key_exists('roleId', $conditions) && is_numeric($conditions['roleId'])) {
            $query->where('role_id', '=', $conditions['roleId']);
        }
        if (array_key_exists('!roleId', $conditions) && is_numeric($conditions['!roleId'])) {
            $query->where('role_id', '!=', $conditions['!roleId']);
        }


        return $query;
    }


}
