<?php


namespace App\Repositories\System;

use App\Models\System\Client;
use App\Models\System\Client as ClientModel;
use App\Repositories\BaseRepository;
use App\Repositories\RepositoryException;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\DB;

/**
 * Class UserRepository
 * @package App\Repositories\System
 * @method ClientModel getModel()
 */
class ClientRepository extends BaseRepository
{

    protected array  $relations = ['clientAddresses','hasActiveBlock','clientPromoCodes','actualClientPromoCodes','orders'];
    /**
     * UserRepository constructor.
     * @param ClientModel|null $model
     */
    public function __construct(ClientModel $model = null)
    {

        if ($model === null) {
            $model = new ClientModel();
        }

        parent::__construct($model);
    }

    /**
     * @return \Illuminate\Support\Carbon
     */
    public function getBirthDay()
    {
        return $this->getModel()->birthday;
    }
    /**
     * @param array $data
     */
    protected function afterModification(array $data = []): void
    {
    }

    /**
     * @return int
     */
    public function getTimeLastSendCode(): int
    {
        return $this->getModel()->code_last_send_at ? $this->getModel()->code_last_send_at->timestamp : 0;
    }

    /**
     * @param $code
     * @return bool
     * @throws \App\Repositories\RepositoryException
     * @throws \Throwable
     */
    public function saveCode($code)
    {
        return $this->update(['code' => bcrypt($code)]);

    }

    /**
     * @return bool
     * @throws \App\Repositories\RepositoryException
     * @throws \Throwable
     */
    public function setCodeLastSendAt()
    {

        return $this->update(['codeLastSendAt' => now()]);
    }


    /**
     * @param array $conditions
     * @return Builder
     * @throws RepositoryException
     */
    protected function conditionsBuilder(array $conditions = []): Builder
    {
        $query = parent::conditionsBuilder($conditions); // TODO: Change the autogenerated stub

        if (array_key_exists('phone', $conditions) && is_string($conditions['phone'])) {
            $query->where('phone', '=', $conditions['phone']);
        }
        if (array_key_exists('likePhone', $conditions) && is_string($conditions['likePhone'])) {
            $query->where('phone', 'like', '%' . $conditions['likePhone'] . '%');
        }
        if (array_key_exists('referrerPromoCode', $conditions) && is_string($conditions['referrerPromoCode'])) {
            $query->where('referrer_promo_code', '=', $conditions['referrerPromoCode']);
        }

        return $query;
    }

    /**
     * @param $clientId
     * @return ClientModel|Builder|\Illuminate\Database\Eloquent\Model
     */
    public function getClientProfileById($clientId)
    {
        return $this->getModel()->where('id', '=', $clientId)->with('clientAddresses')->firstOrFail();
    }

    /**
     * @param Client $model
     * @throws RepositoryException
     * @throws \Throwable
     */
    public function save(Client $model)
    {
        try {
            DB::beginTransaction();

            $model->saveOrFail();

            DB::commit();

        } catch (\Throwable $e) {
            DB::rollBack();
            throw new RepositoryException($e->getMessage() . ' -  Line : ' . $e->getLine());
        }
    }
}
