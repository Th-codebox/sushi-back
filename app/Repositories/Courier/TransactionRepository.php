<?php


namespace App\Repositories\Courier;


use App\Enums\TransactionPaymentType;
use App\Models\System\Transaction;
use App\Models\System\User;
use App\Repositories\BaseRepository;
use App\Services\CRM\System\UserService;
use Illuminate\Database\Eloquent\Builder;


/**
 * Class UserRepository
 * @package App\Repositories\System
 * @method Transaction getModel()
 */
class TransactionRepository extends BaseRepository
{

    protected array $relations = ['sender', 'order','operator'];

    /**
     * TransactionRepository constructor.
     * @param Transaction|null $model
     */
    public function __construct(Transaction $model = null)
    {

        if ($model === null) {
            $model = new Transaction();
        }
        parent::__construct($model);

    }


    protected function conditionsBuilder(array $conditions = []): Builder
    {
        $builder = parent::conditionsBuilder($conditions); // TODO: Change the autogenerated stub

        if (array_key_exists('!status', $conditions) && is_string($conditions['!status'])) {
            $builder->where('status', '!=', $conditions['!status']);
        }

        if (array_key_exists('senderId', $conditions) && is_numeric($conditions['senderId'])) {
            $builder->where('sender_id', '=', $conditions['senderId']);
        }

        if (array_key_exists('orderId', $conditions) && is_numeric($conditions['orderId'])) {
            $builder->where('order_id', '=', $conditions['orderId']);
        }

        if (array_key_exists('operatorId', $conditions) && is_numeric($conditions['operatorId'])) {
            $builder->where('operator_id', '=', $conditions['operatorId']);
        }

        if (array_key_exists('filialCashBoxId', $conditions) && is_numeric($conditions['filialCashBoxId'])) {
            $builder->where('filial_cash_box_id', '=', $conditions['filialCashBoxId']);
        }



        return $builder;
    }

    /**
     * @param array $data
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    protected function afterModification(array $data = []): void
    {

    }

}
