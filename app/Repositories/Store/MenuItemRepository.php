<?php


namespace App\Repositories\Store;


use App\Enums\MenuItemType;
use App\Models\Store\MenuItem;
use App\Repositories\BaseRepository;
use App\Repositories\RepositoryException;
use App\Services\CRM\Store\ModificationMenuItemService;
use Illuminate\Database\Eloquent\Builder;


/**
 * Class UserRepository
 * @package App\Repositories\System
 * @method MenuItem getModel()
 */
class MenuItemRepository extends BaseRepository
{

    protected array $relations = ['categories', 'collections', 'modifications', 'technicalCard', 'bundleItems','souse'];

    /**
     * MenuItemRepository constructor.
     * @param MenuItem|null $model
     */
    public function __construct(MenuItem $model = null)
    {
        if ($model === null) {
            $model = new MenuItem();
        }
        parent::__construct($model);
    }

    protected function conditionsBuilder(array $conditions = []): Builder
    {
        $builder =  parent::conditionsBuilder($conditions); // TODO: Change the autogenerated stub

        if(array_key_exists('noShowHideElement',$conditions) && $conditions['noShowHideElement'] === true) {
            $builder->where('hide', '=' , 0);
        }
        if(array_key_exists('dishType',$conditions) && $conditions['dishType']) {
            $builder->whereHas('technicalCard', function (Builder $query) use ($conditions) {

                $query->where('dish_type', '=', $conditions['dishType']);
            });
        }


        return  $builder;
    }

    /**
     * @param array $data
     * @throws RepositoryException
     */
    protected function afterModification(array $data = []): void
    {
        if (array_key_exists('categories', $data) && is_array($data['categories'])) {
            $this->saveCategories($data['categories']);
        }

        if (array_key_exists('modifications', $data) && is_array($data['modifications'])) {
            $this->saveModifications($data['modifications']);
        }

        if (array_key_exists('bundleItems', $data) &&  is_array($data['bundleItems']) && $this->isBundle()) {
            $this->saveBundleItems($data['bundleItems']);
        }
    }

    /**
     * @param array $categories
     */
    private function saveCategories(array $categories)
    {
        $this->getModel()->categories()->detach();

        foreach ($categories as $category) {
            if (is_array($category) && array_key_exists('id', $category) && is_numeric($category['id']) && (int)$category['id'] > 0) {
                $this->getModel()->categories()->attach($category['id']);
            } elseif (is_numeric($category) && (int)$category > 0) {
                $this->getModel()->categories()->attach($category);
            }
        }
    }

    /**
     * @param array $items
     * @return bool
     * @throws RepositoryException
     */
    private function saveBundleItems(array $items): bool
    {
        $this->deleteMenuItemsBundle();

        foreach ($items as $item) {

            try {
                (new MenuBundleItemRepository())->add([
                    'menuItemBundleId'   => $this->getModel()->id,
                    'menuItemId'         => $item['menuItemId'],
                    'modificationMenuItemId' => $item['modificationMenuItemId'] ?? null,
                ]);


            } catch (\Throwable $e) {
                throw new RepositoryException($e->getMessage() . ' -  Line : ' . $e->getLine());
            }

        }
        return true;
    }

    /**
     * @param array $modifications
     * @return bool
     * @throws RepositoryException
     */
    public function saveModifications(array $modifications): bool
    {
        $this->deleteModifications();

        foreach ($modifications as $modification) {
            if (array_key_exists('modificationId', $modification)) {

                try {
                    $modificationMenuItemService = new ModificationMenuItemService();

                    $modificationMenuItemService::add([
                        'menuItemId'     => $this->getModel()->id,
                        'modificationId' => $modification['modificationId'],
                        'priceAdd'       => $modification['priceAdd'] ?? 0,
                        'priceRate'      => $modification['priceRate'] ?? 0,
                        'status'         => $modification['status'] ?? 0,
                        'sortOrder'      => $modification['sortOrder'] ?? 0,
                    ]);


                } catch (\Throwable $e) {
                    throw new RepositoryException($e->getMessage() . ' -  Line : ' . $e->getLine());
                }
            }
        }
        return true;
    }


    /**
     * @return bool
     * @throws RepositoryException
     */
    public function deleteModifications()
    {
        try {

            $modificationList = ModificationMenuItemService::findList(['menuItemId' => $this->getModel()->id]);

            foreach ($modificationList as $item) {
                $item->delete();
            }

            return true;
        } catch (\Throwable $e) {

            throw new RepositoryException($e->getMessage() . ' -  Line : ' . $e->getLine());
        }
    }

    /**
     * @return bool
     * @throws RepositoryException
     */
    public function deleteMenuItemsBundle(): bool
    {
        try {

            $modificationList = (new MenuBundleItemRepository())->findList(['menuItemBundleId' => $this->getModel()->id]);

            foreach ($modificationList as $item) {
                $item->delete();
            }

            return true;
        } catch (\Throwable $e) {

            throw new RepositoryException($e->getMessage() . ' -  Line : ' . $e->getLine());
        }
    }

    public function isBundle(): bool
    {
        return $this->getModel()->type->is(MenuItemType::Bundle);
    }


}
