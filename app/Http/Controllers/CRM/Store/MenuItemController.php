<?php


namespace App\Http\Controllers\CRM\Store;


use App\Http\Controllers\CRM\BaseCRMController;
use App\Http\Requests\CRM\MenuItem\CreateMenuItem;
use App\Http\Requests\CRM\MenuItem\SaveModificationMenuItem;
use App\Http\Requests\CRM\MenuItem\UpdateMenuItem;
use App\Http\Resources\CRM\MenuItemResource;
use App\Services\CRM\Store\MenuItemService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Symfony\Component\HttpFoundation\Response;

class MenuItemController extends BaseCRMController
{

    public function __construct(MenuItemService $service)
    {
        parent::__construct($service,CreateMenuItem::class,UpdateMenuItem::class,MenuItemResource::class);
    }


    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Repositories\RepositoryException
     */
    public function index()
    {
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return mixed
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function show($id)
    {
        return parent::show($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     */
    public function store(Request $request)
    {
        return parent::store($request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function update(Request $request, $id)
    {

        return parent::update($request, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }


    /**
     * @param int $id
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function saveModifications(int $id,Request $request) {

        $request = SaveModificationMenuItem::createFrom($request);

        $params = $request->all();

        $validation = Validator::make($params, $request->rules(), $request->messages());

        if ($validation->fails()) {
            return $this->responseError('Неверные параметры', Response::HTTP_UNPROCESSABLE_ENTITY, $validation->errors()->toArray());
        }

        /**
         * @var MenuItemService $service
         */
        $service = $this->service::findOne(['id' => $id]);

        try {

            $service->saveModifications($params['modifications']);

            return $this->responseSuccess(['message' => 'Модификации успешно сохранены']);

        } catch (\Throwable $e) {

            return $this->responseError('Ошибка сохранение доступов: ' . $e->getMessage(), Response::HTTP_UNPROCESSABLE_ENTITY);
        }
    }

}
