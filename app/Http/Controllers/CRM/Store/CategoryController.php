<?php

namespace App\Http\Controllers\CRM\Store;

use App\Http\Controllers\CRM\BaseCRMController;
use App\Http\Requests\CRM\Category\CreateCategory;
use App\Http\Requests\CRM\Category\UpdateCategory;
use App\Http\Resources\CRM\CategoryResource;
use App\Services\CRM\Store\CategoryService;
use Illuminate\Http\Request;

class CategoryController extends BaseCRMController
{
    public function __construct(CategoryService $service)
    {
        parent::__construct($service,CreateCategory::class,UpdateCategory::class,CategoryResource::class);
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Repositories\RepositoryException
     */
    public function index()
    {

        $sortParams = [];
        $searchParams = [];

        if ($this->hasSortRequest()) {
            $sortParams = $this->getSort();
        }

        if ($this->hasSearchRequest()) {
            $searchParams = $this->getSearchParams();
        }

        $payLoad = $sortParams + $searchParams;

        $page = request()->input('page', '1');

        if (is_string($page) && $page !== '' && (int)$page > 0) {
            $payLoad['page'] = $page;
        }

        $limit = request()->input('limit', 20);
        $limit = (is_numeric($limit) && (int)$limit >= 0 ? (int)$limit : 20);

        $offset = request()->input('offset', 0);
        $offset = (is_numeric($offset) && (int)$offset >= 0 ? (int)$offset : 0);

        $conditions = parent::conditions();

        $result = $this->service::getAllWithPagination(
            [
                'sort'       => $sortParams,
                'search'     => $searchParams,
                'conditions' => $conditions,
                'page'       => $page,
            ],
            $offset,
            $limit
        );

        $meta = [
            'total'   => $result->total(),
            'offset'  => $offset,
            'limit'   => $result->perPage(),
            'payload' => $payLoad,
        ];

        return $this->respondWithCollection($result->items(), $meta);
    }

    /**
     * @param $id
     * @return mixed
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function show($id)
    {
        return parent::show($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     */
    public function store(Request $request)
    {
        return parent::store($request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     * @throws \ReflectionException
     */
    public function update(Request $request, $id)
    {
        return parent::update($request, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }



}
