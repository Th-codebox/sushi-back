<?php


namespace App\Http\Controllers\CRM\Order;

use App\Enums\BasketSource;
use App\Enums\BasketStatus;
use App\Enums\DeliveryType;
use App\Exceptions\Http\Controller\RequestClassNotFoundException;
use App\Http\Controllers\CRM\BaseCRMController;
use App\Http\Requests\CRM\Basket\CreateBasket;
use App\Http\Requests\CRM\Basket\UpdateBasket;
use App\Http\Requests\CRM\Order\AddBasketItem;
use App\Http\Requests\CRM\Order\UpdateBasketItem;
use App\Http\Requests\Web\Order\UpdateCourierBasket;
use App\Http\Requests\Web\Order\UpdatePaymentTypeBasket;
use App\Http\Requests\Web\Order\UpdatePickUpBasket;
use App\Http\Requests\Web\Order\UpdatePromoCodeBasket;
use App\Http\Resources\CRM\BasketResource;
use App\Services\CRM\Order\BasketService;
use App\Services\CRM\Store\FilialService;
use Illuminate\Support\Carbon;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Symfony\Component\HttpFoundation\Response;

/**
 * Class BasketController
 * @package App\Http\Controllers\Web\Order
 */
class BasketController extends BaseCRMController
{

    public function __construct(BasketService $service)
    {
        parent::__construct($service, CreateBasket::class, UpdateBasket::class, BasketResource::class);
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Repositories\RepositoryException
     */
    public function index()
    {
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return mixed
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function show($id)
    {
        return parent::show($id); // TODO: Change the autogenerated stub
    }


    /**
     * @param Request $request
     * @return JsonResponse
     * @throws RequestClassNotFoundException
     * @throws \App\Repositories\RepositoryException
     */
    public function store(Request $request)
    {

        try {
            $request = $this->requestCreateClass::createFrom($request);
        } catch (\Throwable $e) {
            throw new RequestClassNotFoundException('Ошибка класса валидации');
        }

        $params = $request->all();


        unset($params['id']);

        $validation = Validator::make($params, $request->rules(), $request->messages());

        if ($validation->fails() || !$params) {
            return $this->responseError('Неверные параметры', Response::HTTP_UNPROCESSABLE_ENTITY, $validation->errors()->toArray());
        }


        $params['basketSource'] = $request->get('basketSource', BasketSource::Crm);
        $params['status'] = BasketStatus::inProcess;
        $params['date'] = Carbon::now()->toDateString();

        $service = $this->service::add($params);

        $this->data = [
            'message' => 'Создана новая запись',
            'id'      => $service->getRepository()->getModel()->id,
        ];

        return $this->responseSuccess($this->data);


    }

    /**
     * @param Request $request
     * @param $id
     * @return JsonResponse
     * @throws RequestClassNotFoundException
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function update(Request $request, $id)
    {
        return parent::update($request, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }


    /**
     * @param $id
     * @return mixed
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function getClientCrmActiveBasket($id)
    {
        try {
            $service = $this->service::findOne(['clientId' => $id, 'basketSource' => BasketSource::Crm, 'status' => BasketStatus::inProcess]);
        } catch (\Throwable $e) {
            $service = $this->service::add(['clientId' => $id, 'basketSource' => BasketSource::Crm, 'status' => BasketStatus::inProcess]);
        }


        return $this->respondWithItem($service->getRepository()->getModel());
    }


    /**
     * @param $id
     * @return JsonResponse
     */
    public function refreshAndReturnBasket($id): JsonResponse
    {
        try {
            $basketModel = $this->service::findOne(['id' => $id])->getRepository()->getModel();
        } catch (\Exception $e) {
            return $this->responseError('Ошибка обновления и пересчёта корзины: ' . $e->getMessage());
        }

        return $this->respondWithItem($basketModel);
    }


    /**
     * @param int $id
     * @param UpdatePickUpBasket $request
     * @return JsonResponse
     * @throws \App\Repositories\RepositoryException
     * @throws \App\Services\CRM\CRMServiceException
     */
    public function changePickUp(int $id, UpdatePickUpBasket $request): JsonResponse
    {

        $data = $request->all();

        $data['deliveryType'] = DeliveryType::Self;

        $service = $this->service::findOne(['id' => $id]);

        $service->edit($data);

        return $this->refreshAndReturnBasket($id);
    }


    /**
     * @param int $id
     * @param UpdatePaymentTypeBasket $request
     * @return JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function changePaymentType(int $id, UpdatePaymentTypeBasket $request): JsonResponse
    {

        $this->update($request, $id);

        return $this->refreshAndReturnBasket($id);
    }

    /**
     * @param int $id
     * @param UpdateCourierBasket $request
     * @return JsonResponse
     * @throws \App\Repositories\RepositoryException
     * @throws \App\Services\CRM\CRMServiceException
     */
    public function changeCourier(int $id, UpdateCourierBasket $request): JsonResponse
    {
        $data = $request->all();

        $data['deliveryType'] = DeliveryType::Delivery;

        $service = $this->service::findOne(['id' => $id]);

        $service->edit($data);


        return $this->refreshAndReturnBasket($id);
    }

    /**
     * @param int $id
     * @return JsonResponse
     * @throws \App\Repositories\RepositoryException
     * @throws \App\Services\CRM\CRMServiceException
     */
    public function changeOnYandexDelivery(int $id): JsonResponse
    {


        $data['deliveryType'] = DeliveryType::Yandex;


        $service = $this->service::findOne(['id' => $id]);

        $service->edit($data);


        return $this->refreshAndReturnBasket($id);
    }

    /**
     * @param int $id
     * @return JsonResponse
     * @throws \App\Repositories\RepositoryException
     * @throws \App\Services\CRM\CRMServiceException
     */
    public function changeOnDeliveryClub(int $id): JsonResponse
    {


        $data['deliveryType'] = DeliveryType::DeliveryClub;
  
        $service = $this->service::findOne(['id' => $id]);

        $service->edit($data);


        return $this->refreshAndReturnBasket($id);
    }

    /**
     * @param int $id
     * @param UpdatePromoCodeBasket $request
     * @return JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function addPromoCode(int $id, UpdatePromoCodeBasket $request): JsonResponse
    {


        $this->update($request, $id);

        return $this->refreshAndReturnBasket($id);
    }

    /**
     * @param int $id
     * @param AddBasketItem $request
     * @return JsonResponse
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function addBasketItem(int $id, AddBasketItem $request): JsonResponse
    {
        $service = $this->service::findOne(['id' => $id]);

        $service->addBasketItem($request->all());

        return $this->refreshAndReturnBasket($id);
    }

    /**
     * @param int $id
     * @param UpdateBasketItem $request
     * @return JsonResponse
     */
    public function updateBasketItem(int $id, UpdateBasketItem $request): JsonResponse
    {

        $basketId = $this->service->updateBasketItem($id, $request->all());


        return $this->refreshAndReturnBasket($basketId);
    }


    /**
     * @param $id
     * @return JsonResponse
     */
    public function deleteItem($id): JsonResponse
    {
        try {
            $basketId = $this->service->deleteItemById($id);
        } catch (\Throwable $e) {
            return $this->responseError('Ошибка удаления товара корзины: ' . $e->getMessage());
        }

        return $this->refreshAndReturnBasket($basketId);
    }


    /**
     * @param $id
     * @return JsonResponse
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function deleteItems($id): JsonResponse
    {
        $service = $this->service::findOne(['id' => $id]);
        try {
            $service->deleteAllItems();
        } catch (\Throwable $e) {
            return $this->responseError('Ошибка очистки товаров корзины: ' . $e->getMessage());
        }

        return $this->refreshAndReturnBasket($id);
    }
}
