<?php

namespace App\Http\Controllers\CRM\System;

use App\Http\Controllers\CRM\BaseCRMController;
use Illuminate\Support\Carbon;
use App\Http\Requests\CRM\WorkSchedule\{CreateTodayWorkSchedule,
    GetScheme,
    GetTimeTable,
    UpdateWorkScheduleRequest,
    StoreWorkScheduleRequest
};
use App\Http\Resources\CRM\WorkScheduleResource;
use App\Services\CRM\System\WorkScheduleService;


class WorkScheduleController extends BaseCRMController
{
    public function __construct(WorkScheduleService $service)
    {
        parent::__construct($service, StoreWorkScheduleRequest::class, UpdateWorkScheduleRequest::class, WorkScheduleResource::class);
    }

    protected function conditions(): array
    {
        $conditions = parent::conditions(); // TODO: Change the autogenerated stub
        if (request()->get('date')) {
            $conditions['date'] = request()->get('date');
        }

        $filialId = request()->get('filialId');

        if (is_numeric($filialId) && $filialId > 0) {
            $conditions['filialId'] = $filialId;
        }
        return $conditions;
    }

    /**
     * @param GetTimeTable $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getCountStaffByDate(GetTimeTable $request)
    {
        $date = null;

        if ($request->get('date')) {
            try {
                $date = Carbon::createFromTimestamp($request->get('date'));
            } catch (\Throwable $e) {
                return $this->responseError('Неправильный формат даты, задайте дату в формате unixtime ', 402, null, get_class($e));
            }

        }

        if ($request->get('filialId') && is_numeric($request->get('filialId'))) {
            $filialId = $request->get('filialId');
        }

        $data = $this->service->getCountStaff($date, $filialId ?? null);

        return $this->responseSuccess($data);
    }

    /**
     * @param int $filialId
     * @param GetScheme $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getScheme(int $filialId, GetScheme $request)
    {

        try {
            $lastRecordedDay = Carbon::createFromDate($request->get('date'));
        } catch (\Throwable $e) {
            $lastRecordedDay = Carbon::now();
        }


        $scheme = $this->service->getSchemeForDateByFilial($lastRecordedDay, $filialId);

        return $this->responseSuccess(['data' => $scheme]);
    }


    /**
     * @param CreateTodayWorkSchedule $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function setDay(CreateTodayWorkSchedule $request)
    {
        $items = $request->get('items');
        $date = $request->get('date');

        $this->service->setDay($date,$items);

        return $this->responseSuccess(['message' => 'Успешно сохраненно!']);
    }

}
