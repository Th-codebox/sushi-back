<?php


namespace App\Http\Controllers\CRM\System;


use App\Http\Controllers\CRM\BaseCRMController;

use App\Http\Requests\CRM\Client\AddAddress;
use App\Http\Requests\CRM\Client\CreateClient;
use App\Http\Requests\CRM\Client\UpdateClient;
use App\Http\Requests\CRM\User\AddUserToBlackList;
use App\Http\Resources\CRM\ClientResource;
use App\Repositories\Client\ClientAddressRepository;
use App\Services\CRM\System\BlackListClientService;
use App\Services\CRM\System\ClientAddressService;
use App\Services\CRM\System\ClientService;
use Illuminate\Http\Request;

class ClientController extends BaseCRMController
{

    protected function conditions(): array
    {
        $data =  parent::conditions(); // TODO: Change the autogenerated stub

        $data['likePhone']  = request()->get('phone');

        return  $data;
    }

    /**
     * ClientController constructor.
     * @param ClientService $service
     */
    public function __construct(ClientService $service)
    {
        parent::__construct($service, CreateClient::class, UpdateClient::class, ClientResource::class);
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Repositories\RepositoryException
     */
    public function index()
    {
        return parent::index();
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function update(Request $request, $id)
    {
        return parent::update($request, $id);
    }

    /**
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        return parent::destroy($id);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \App\Exceptions\Http\Controller\RequestClassNotFoundException
     */
    public function store(Request $request)
    {
        return parent::store($request);
    }

    /**
     * @param $id
     * @return mixed
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function show($id)
    {
        return parent::show($id);
    }


    public function addToBlackList(int $id, AddUserToBlackList $request)
    {
        $params = $request->all();

        $params['clientId'] = $id;

        try {
            BlackListClientService::add($params);

            $this->data = [
                'message' => 'Клиент добавлен в чёрный список',
            ];

            return $this->responseSuccess($this->data);

        } catch (\Exception $e) {

            return $this->responseError('Ошибка добавление в чёрный список: ' . $e->getMessage());
        }
    }

    public function removeFromBlackList(int $id)
    {

        $params['clientId'] = $id;

        try {
            $reasons = BlackListClientService::findList($params);

            foreach ($reasons as $reason) {
                $reason->edit(['statusBlock' => false]);
            }

            $this->data = [
                'message' => 'Клиент исключен из черного списка',
            ];

            return $this->responseSuccess($this->data);

        } catch (\Exception $e) {

            return $this->responseError('Ошибка  исключения из черного списка: ' . $e->getMessage());
        }
    }

    public function addClientAddress(int $id, AddAddress $request)
    {
        $params = $request->all();

        $params['clientId'] = $id;

        try {
            ClientAddressService::add($params);

            $this->data = [
                'message' => 'Адрес успешно добавлен',
            ];

            return $this->responseSuccess($this->data);

        } catch (\Exception $e) {

            return $this->responseError('Ошибка добавление адреса: ' . $e->getMessage());
        }
    }
}
