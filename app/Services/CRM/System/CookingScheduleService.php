<?php


namespace App\Services\CRM\System;


use App\Enums\ManufacturerType;
use App\Events\Cooking\UpdateAssemblyCookingSchedule;
use App\Events\Cooking\UpdateColdCookingSchedule;
use App\Events\Cooking\UpdateCookingSchedule;
use App\Events\Cooking\UpdateHotCookingSchedule;
use App\Models\Order\Order;
use App\Repositories\System\CookingScheduleRepository;
use App\Services\CRM\CRMBaseService;
use App\Services\CRM\CRMServiceException;
use App\Services\CRM\Order\OrderService;


/**
 * Class UserService
 * @package App\Service\System
 *
 * @method CookingScheduleRepository getRepository()
 */
class CookingScheduleService extends CRMBaseService
{
    /**
     * CookingScheduleService constructor.
     * @param CookingScheduleRepository|null $repository
     * @throws \App\Services\CRM\CRMServiceException
     */
    public function __construct(?CookingScheduleRepository $repository = null)
    {
        parent::__construct($repository);
    }


    /**
     * @param array $data
     * @return array
     * @throws CRMServiceException
     * @throws \App\Repositories\RepositoryException
     */
    protected function dataCorrection(array $data): array
    {
        $data = parent::dataCorrection($data); // TODO: Change the autogenerated stub

        if (!$this->getRepository()->getModel()->id) {
            /**
             * @var Order $orderModel
             */
            $orderModel = OrderService::findOne(['id' => $data['orderId']])->getRepository()->getModel();

            $coldIsCompleted = true;
            $hotIsCompleted = true;

            if ($orderModel->basket->groupItems(ManufacturerType::Hot)->count() > 0) {
                $hotIsCompleted = false;
            }

            if ($orderModel->basket->groupItems(ManufacturerType::Cold)->count() > 0) {
                $coldIsCompleted = false;
            }

            $data['coldIsCompleted'] = $coldIsCompleted;
            $data['hotIsCompleted'] = $hotIsCompleted;
        }

        return $data;
    }

    public function events()
    {
        parent::events(); // TODO: Change the autogenerated stub

        UpdateCookingSchedule::dispatch($this->getRepository()->getModel(), Auth()->user());

        if (!$this->getRepository()->getModel()->cold_is_completed) {

            UpdateColdCookingSchedule::dispatch($this->getRepository()->getModel(), Auth()->user());

        }

        if (!$this->getRepository()->getModel()->hot_is_completed) {
            UpdateHotCookingSchedule::dispatch($this->getRepository()->getModel(), Auth()->user());
        }

        if ($this->getRepository()->getModel()->cold_is_completed && $this->getRepository()->getModel()->hot_is_completed) {
            UpdateAssemblyCookingSchedule::dispatch($this->getRepository()->getModel(), Auth()->user());
        }
    }

}
