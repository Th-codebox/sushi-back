<?php


namespace App\Services\CRM\System;


use App\Events\Client\CreateClient;
use App\Jobs\NotificationSender;
use App\Notifications\AuthCode;
use App\Repositories\System\ClientRepository;
use App\Services\CRM\CRMBaseService;
use App\Services\CRM\CRMServiceException;

use App\Services\CRM\Store\ClientPromoCodeService;
use App\Services\CRM\Store\PromoCodeService;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Carbon;

/**
 * Class UserService
 * @package App\Service\System
 *
 * @method ClientRepository getRepository()
 */
class ClientService extends CRMBaseService
{
    /**
     * ClientService constructor.
     * @param ClientRepository|null $repository
     * @throws \ReflectionException
     */
    public function __construct(?ClientRepository $repository = null)
    {
        parent::__construct($repository);
    }

    /**
     * @param $phone
     * @return array
     * @throws CRMServiceException
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public static function sendCode($phone): array
    {
        try {

            $clientService = self::findOne(['phone' => $phone]);

        } catch (ModelNotFoundException $e) {

            $phone = preg_replace('/\D*/', '', $phone);
            if (substr($phone, 0, 1) == 8) {
                $phone[0] = 7;
            }

            $clientService = self::add(['phone' => $phone, 'status' => 1]);
        }


        $secondToAcceptSendAgain = $clientService->getRepository()->getTimeLastSendCode() + 60 - time();

        if ($secondToAcceptSendAgain <= 0) {

            $client = $clientService->getRepository()->getModel();


            //if (is_string($client->phone) && $client->phone !== '') {
            $authCodeString = $clientService->generateAndSaveCode();

            if ($authCodeString) {

                $client->notify(new AuthCode($authCodeString));

                //NotificationSender::dispatch([$userData['phone']], $authCode);

                return [
                    'send'    => true,
                    'message' => 'send successes',
                ];
            }
            /*} else {
                $message = 'Телефон не найден';
            }*/
        } else {
            $message = 'Много запросов! повторите попытку через ' . $secondToAcceptSendAgain . ' секунд(ы)';
        }

        return [
            'send'       => false,
            'message'    => $message ?? 'Send error',
            'timeToSend' => $secondToAcceptSendAgain ?? 0,
        ];
    }

    /**
     * @return false|int
     * @throws CRMServiceException
     * @throws \App\Repositories\RepositoryException
     */
    public function generateAndSaveCode()
    {
        $phone = $this->getRepository()->getModel()->phone;
        $authCode = static::generateAuthCode($phone);

        if ($this->getRepository()->saveCode($authCode) && $this->getRepository()->setCodeLastSendAt()) {
            return $authCode;
        }

        return false;
    }

    /**
     * @return int
     * @throws CRMServiceException
     */
    public static function generateAuthCode($phone): int
    {
        $devPhones = config("auth.dev_phones") ?? [];

        if (in_array($phone, $devPhones)) {
            return 7777;
        }

        try {
            return random_int(1000, 9999);
        } catch (\Throwable $e) {
            throw new CRMServiceException($e->getMessage());
        }

    }

    protected function dataCorrection(array $data)
    {
        $data = parent::dataCorrection($data); // TODO: Change the autogenerated stub

        if (array_key_exists('phone', $data) && $data['phone']) {
            $data['phone'] = preg_replace('/\D*/', '', $data['phone']);
            if (substr($data['phone'], 0, 1) == 8) {
                $data['phone'][0] = 7;
            }
        }

        if (array_key_exists('birthday', $data) && $data['birthday']) {

            try {
                $data['birthday'] = Carbon::createFromFormat('Y-m-d', $data['birthday'])->toDateString();
            } catch (\Throwable $e) {
                $data['birthday'] = Carbon::createFromFormat('d.m.Y', $data['birthday'])->toDateString();
            } catch (\Throwable $e) {
                throw new CRMServiceException('Дата введенена в неверном формате');
            }
        }

        return $data;
    }

    public static function add(array $data)
    {


        return parent::add($data); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $data
     * @throws CRMServiceException
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function addPromoCode(array $data)
    {
        try {
            /**
             * @var PromoCodeService $promoCode
             */
            $promoCode = PromoCodeService::findOne(['code' => $data['promoCode']]);
        } catch (\Throwable $e) {
            throw new CRMServiceException('Промокод не существует');
        }


        $promoCode->clientValidate($this->getRepository()->getModel()->id);

        $existPromoCodeClient = null;

        try {
            $existPromoCodeClient = ClientPromoCodeService::findOne([
                'clientId'    => $this->getRepository()->getModel()->id,
                'promoCodeId' => $promoCode->getRepository()->getModel()->id,
                'activated'   => false,
            ]);

        } catch (\Throwable $e) {
            ClientPromoCodeService::add([
                'clientId'    => $this->getRepository()->getModel()->id,
                'promoCodeId' => $promoCode->getRepository()->getModel()->id,
                'activated'   => false,
            ]);
        }

        if ($existPromoCodeClient) {
            throw new CRMServiceException('Промокод уже добавлен');
        }
    }

    /**
     * @return mixed|void
     * @throws CRMServiceException
     */
    public function events()
    {
        parent::events(); // TODO: Change the autogenerated stub

        CreateClient::dispatch($this->getRepository()->getModel());

    }
}
