<?php


namespace App\Services\CRM\System;


use App\Enums\ShiftTime;
use App\Libraries\Image\ImageModify;
use App\Models\System\User;
use App\Repositories\System\WorkScheduleRepository;
use App\Services\CRM\CRMBaseService;
use App\Services\CRM\CRMServiceException;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;

/**
 * Class WorkScheduleService
 * @package App\Services\CRM\System
 * @method WorkScheduleRepository getRepository()
 */
class WorkScheduleService extends CRMBaseService
{

    public function __construct(?WorkScheduleRepository $repository = null)
    {
        parent::__construct($repository);
    }

    /**
     * @param array $data
     * @return array
     * @throws CRMServiceException
     */
    protected function dataCorrection(array $data)
    {

        try {
            $existWorkSchedule = $this::findOne(['date' => $data['date'] ?? null, 'workSpaceId' => $data['workSpaceId'] ?? null, 'shiftTime' => $data['shiftTime'] ?? null]);
        } catch (\Throwable $e) {
            $existWorkSchedule = null;
        }

        if ($existWorkSchedule && !$this->getRepository()->getModel()->id) {
            throw new CRMServiceException('Нельзя добавить существующие смену');
        }

        $date = isset($data['date']) ? Carbon::createFromDate($data['date']) : $this->getRepository()->getModel()->date;


        if ($date->diffInDays(Carbon::now(), false) > 0) {
            throw new CRMServiceException('Нельзя добавлять или редактировать смену задним числом');
        }

        if ($date->toFormattedDateString() !== Carbon::now()->toFormattedDateString()) {
            $this->getRepository()->getModel()->disableLogging();
        }

        return parent::dataCorrection($data); // TODO: Change the autogenerated stub
    }

    public function delete()
    {
        $date = isset($data['date']) ? Carbon::createFromDate($data['date']) : $this->getRepository()->getModel()->date;

        if ($date->diffInDays(Carbon::now(), false) > 0) {
            throw new CRMServiceException('Нельзя добавлять или редактировать смену задним числом');
        }

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param int $userId
     * @param Carbon|null $date
     * @return mixed
     * @throws \App\Repositories\RepositoryException
     */
    public function getTimetableForCourier(int $userId, ?Carbon $date = null)
    {
        if ($date === null) {
            $date = Carbon::now();
        }

        $collections = $this->repository->findList(['dateMonth' => $date, 'userId' => $userId]);

        return $this->repository->getModelCollections($collections);
    }


    /**
     * @param Carbon|null $date
     * @param $filialId
     * @return array
     */
    public function getCountStaff(?Carbon $date = null, $filialId): array
    {
        if ($date === null) {
            $date = Carbon::now();
        }

        return $this->repository->getStaffCountForMonth($date, $filialId);

    }


    /**
     * @param Carbon $date
     * @param $filialId
     * @return array
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function getSchemeForDateByFilial(Carbon $date, $filialId)
    {
        $workSpaceServices = WorkSpaceService::findList(['filialId' => $filialId]);

        $scheme = [];

        foreach ($workSpaceServices as $workSpaceService) {
            /**
             * @var WorkSpaceService $workSpaceService
             */

            $workSpaceModel = $workSpaceService->getRepository()->getModel();

            $group = $workSpaceModel->group;
            if ($workSpaceModel->role_id === 3) {
                $users = (new UserService())->findListAsCollectionModel(['!roleId' => 2, 'relations' => ['role']]);
            } else {
                $users = (new UserService())->findListAsCollectionModel(['roleId' => $workSpaceModel->role_id, 'relations' => ['role']]);
            }

            $users->map(function (User $user) {
                $user->image = ImageModify::getInstance()->resize($user->image);
                return $user;
            });

            $scheme[$group]['groupName'] = $group;
            $scheme[$group]['groupId'] = $workSpaceModel->role_id;
            $scheme[$group]['workspaces'][] = [
                'name'        => $workSpaceModel->name,
                'workSpaceId' => $workSpaceModel->id,
                'isReserve'   => $workSpaceModel->is_reserve,
                'date'        => $date,
                'shiftTime'   => null,
                'userId'      => null,
                'users'       => $users->toArray(),
                'shiftTimes'  => ShiftTime::getValues(),
            ];
        }

        return array_values($scheme);

    }

    /**
     * @param string $date
     * @param array $items
     * @return bool
     * @throws \App\Repositories\RepositoryException
     * @throws \ReflectionException
     */
    public function setDay(string $date, array $items): bool
    {

        $items = array_map(static function ($item) use ($date) {
            $item['date'] = $date;
            return $item;
        }, $items);

        /**
         * убрать костыль $items[0]['workSpaceId']
         */
        $filialId = WorkSpaceService::findOne(['id' => $items[0]['workSpaceId']])->getRepository()->getModel()->filial_id;

        $workSchedules = $this::findList(['date' => $date, 'filialId' => $filialId]);

        foreach ($workSchedules as $workSchedule) {
            /**
             * @var WorkScheduleService $workSchedule
             */
            $workSchedule->delete();
        }

        foreach ($items as $item) {
            $this::add($item);
        }

        return true;
    }

}
