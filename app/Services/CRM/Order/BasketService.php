<?php


namespace App\Services\CRM\Order;

use App\Enums\BasketItemType;
use App\Enums\BasketSource;
use App\Enums\BasketStatus;
use App\Enums\DeliveryType;
use App\Enums\OrderStatus;
use App\Enums\PaymentType;
use App\Enums\PolygonType;
use App\Events\Basket\UpdateBasket;
use App\Jobs\Payment;
use App\Libraries\Helpers\SettingHelper;
use App\Libraries\Payment\Contracts\PaymentGateway;
use App\Libraries\Payment\UCS\UcsConfig;
use App\Libraries\Payment\UCS\UcsPaymentGateway;
use App\Libraries\System\FilialSettings;
use App\Models\Order\Basket;
use App\Models\Order\Order;
use App\Models\Store\ClientPromoCode;
use App\Models\Store\PromoCode;
use App\Models\System\ClientAddress;
use App\Models\System\Polygon;
use App\Repositories\Order\BasketItemRepository;
use App\Repositories\Order\BasketRepository;
use App\Repositories\RepositoryException;
use App\Repositories\System\PolygonRepository;
use App\Services\CRM\CRMBaseService;
use App\Services\CRM\CRMServiceException;
use App\Services\CRM\Store\ClientPromoCodeService;
use App\Services\CRM\Store\PromoCodeService;
use App\Services\CRM\System\ClientAddressService;
use App\Services\CRM\System\PaymentService;
use App\Services\Geo\PolygonService;
use App\Services\Web\CatalogServiceException;
use Illuminate\Support\Carbon;


/**
 * Class BasketService
 * @package App\Services\CRM\Store
 * @method BasketRepository getRepository()
 */
class BasketService extends CRMBaseService
{
    private PolygonService $polygonService;
    private BasketItemRepository $basketItemRepository;

    public function __construct(?BasketRepository $repository = null)
    {

        parent::__construct($repository);

        $this->polygonService = new PolygonService(new PolygonRepository());
        $this->basketItemRepository = new BasketItemRepository();
    }

    /**
     * @param array $data
     * @return array
     * @throws CRMServiceException
     * @throws CatalogServiceException
     * @throws RepositoryException
     * @throws \ReflectionException
     */
    protected function dataCorrection(array $data): array
    {
        $data = parent::dataCorrection($data); // TODO: Change the autogenerated stub

        if (array_key_exists('paymentPhone', $data) && $data['paymentPhone']) {
            $data['paymentPhone'] = preg_replace('/\D*/', '', $data['paymentPhone']);
            if (substr($data['paymentPhone'], 0, 1) == 8) {
                $data['paymentPhone'][0] = 7;
            }
        }

        if (array_key_exists('callPhone', $data) && $data['callPhone']) {
            $data['callPhone'] = preg_replace('/\D*/', '', $data['callPhone']);
            if (substr($data['callPhone'], 0, 1) == 8) {
                $data['callPhone'][0] = 7;
            }
        }

        if ($this->getRepository()->getModel()->client_address && $this->getRepository()->getModel()->client_address->break_address) {
            $data['noCall'] = false;
        }

        if (array_key_exists('clientAddressId', $data)) {

            try {
                /**
                 * @var ClientAddress $address
                 */
                $address = ClientAddressService::findOne(['id' => $data['clientAddressId']])->getRepository()->getModel();

                $availablePolygons = $this->polygonService->checkAndGetAvailablePolygonsByPoint($address->lat_geo, $address->let_geo);

            } catch (\Throwable $e) {
                throw new CRMServiceException('Некоректный адрес клиента', 422);
            }


            if (($availablePolygon = $availablePolygons->sortBy('price')->first())) {
                /**
                 * @var Polygon $availablePolygon
                 */

                $data['timeInDelivery'] = $availablePolygon->time ? Carbon::createFromFormat('H:i:s', $availablePolygon->time)->secondsSinceMidnight() : null;
                $data['freeDelivery'] = $availablePolygon->free_from_price;
                $data['deliveryPrice'] = $availablePolygon->price;
                $data['filialId'] = $availablePolygon->filial_id;
            } elseif (true || (string)$this->getRepository()->getModel()->basket_source === BasketSource::Crm) {

                /**
                 * @var Polygon $availablePolygon
                 */
                $availablePolygon = \App\Services\CRM\System\PolygonService::findOne(['type' => PolygonType::Red])->getRepository()->getModel();

            } else {
                throw new CRMServiceException('Адрес данного заказа невходит не в один полигон');
            }

            $data['timeInDelivery'] = $availablePolygon->time ? Carbon::createFromFormat('H:i:s', $availablePolygon->time)->secondsSinceMidnight() : null;
            $data['freeDelivery'] = $availablePolygon->free_from_price;
            $data['deliveryPrice'] = $availablePolygon->price;
            $data['filialId'] = $availablePolygon->filial_id;
        }

        if (array_key_exists('deliveryType', $data)
            && in_array($data['deliveryType'], [
                DeliveryType::Yandex,
                DeliveryType::DeliveryClub
            ])) {
            /**
             * 15 min for delivery
             */
            $data['timeInDelivery'] = 900;
        }

        if (array_key_exists('deliveryType', $data)
            && $data['deliveryType'] === DeliveryType::Self
            && !array_key_exists('filialId', $data)
            && is_numeric($data['filialId'])) {
            throw new CRMServiceException('Выберите филиал для самовывоза');
        }


        if (array_key_exists('deliveryType', $data)
            &&  in_array($data['deliveryType'],[DeliveryType::Yandex,DeliveryType::DeliveryClub],true)
            && !$this->getRepository()->getModel()->filial_id) {
            throw new CRMServiceException('Выберите филиал');
        }


        if (array_key_exists('deliveryType', $data) && $data['deliveryType'] === DeliveryType::Self) {
            /* время на заказ с самовывозом */
            $data['timeInDelivery'] = 900;
            $data['freeDelivery'] = null;
            $data['deliveryPrice'] = null;
        }


        if (array_key_exists('paymentType', $data)
            && $data['paymentType'] !== PaymentType::Online
            && (($this->getRepository()->getModel()->total_price / 100) > (int)SettingHelper::getSettingValue('totalForPreBay', $this->getRepository()->getModel()->filial_id))) {
            throw new CatalogServiceException('Доступна только предоплата');
        }

        if (array_key_exists('clientMoney', $data) && is_numeric($data['clientMoney'])) {
            $data['clientMoney'] *= 100;
        }


        if (array_key_exists('cookingAndDeliveryTime', $data)  && $this->getRepository()->getModel()->order && $this->getRepository()->getModel()->order->dead_line) {
            throw new CatalogServiceException('Нельзя поменять время заказа, т.к. заказ уже выполняется');
        }

        if (array_key_exists('promoCodeId', $data) || array_key_exists('promoCode', $data)) {

            if (!empty($data['promoCodeId']) || !empty($data['promoCode'])) {

                if ($this->getRepository()->getModel()->client_promo_code_id) {

                    $clientPromoCodeService = ClientPromoCodeService::findOne([
                        'id' => $this->getRepository()->getModel()->client_promo_code_id,
                    ]);

                    $clientPromoCodeService->edit(["activated" => false, "activatedAt" => null]);
                }

                try {
                    /**
                     * @var PromoCodeService $promoCode
                     */
                    if (!empty($data['promoCodeId'])) {
                        $promoCode = PromoCodeService::findOne(['id' => $data['promoCodeId']]);
                    } else {
                        $promoCode = PromoCodeService::findOne(['code' => $data['promoCode']]);
                    }

                } catch (\Throwable $e) {
                    throw new CRMServiceException('Промокод не существует');
                }
                if(!auth()->guard('crm')->check() && $promoCode->getRepository()->getModel()->only_crm) {
                    throw new CRMServiceException('Промокод не доступен');
                }


                $promoCode->clientValidate($this->getRepository()->getModel()->client_id);

                /** @var Basket $basketModel */
                $basketModel = $this->getRepository()->getModel();

                /** @var PromoCode $promoCodeModel */
                $promoCodeModel = $promoCode->getRepository()->getModel();

                $promoCodeModel->checkCanApplyToBasket($basketModel);





                try {
                    $clientPromoCodeService = ClientPromoCodeService::findOne([
                        'clientId'    => $this->getRepository()->getModel()->client_id,
                        'promoCodeId' => $promoCode->getRepository()->getModel()->id,
                        'activated'   => false,
                    ]);
                } catch (\Throwable $e) {

                    $deadLine = $promoCode->getRepository()->getModel()->days_for_active ? Carbon::now()->addDays($promoCode->getRepository()->getModel()->days_for_active) : null;

                    $clientPromoCodeService = ClientPromoCodeService::add([
                        'clientId'    => $this->getRepository()->getModel()->client_id,
                        'promoCodeId' => $promoCode->getRepository()->getModel()->id,
                        'deadLine'    => $deadLine,
                    ]);
                }

                /** @var ClientPromoCode $clientPromoCodeModel */
                $clientPromoCodeModel = $clientPromoCodeService->getRepository()->getModel();

                /* Костыль для дня рождения */
                if ($clientPromoCodeModel->promo_code_id !== 1) {

                    if ($clientPromoCodeService->getRepository()->getModel()->date_begin && $clientPromoCodeService->getRepository()->getModel()->date_begin->unix() > Carbon::now()->unix()) {
                        throw new CRMServiceException('Промокод можно активировать только с ' . $clientPromoCodeService->getRepository()->getModel()->date_begin->format('d.m.Y'));
                    }


                    if ($clientPromoCodeService->getRepository()->getModel()->dead_line && $clientPromoCodeService->getRepository()->getModel()->dead_line->unix() < Carbon::now()->unix()) {
                        throw new CRMServiceException('Время действие промокода истекло');
                    }
                }

                $clientPromoCodeService->edit(["activated" => true, "activatedAt" => Carbon::now()]);

                $data['clientPromoCodeId'] = $clientPromoCodeService->getRepository()->getModel()->id;

            } elseif ($this->getRepository()->getModel()->client_promo_code_id) {

                $clientPromoCodeService = ClientPromoCodeService::findOne([
                    'id' => $this->getRepository()->getModel()->client_promo_code_id,
                ]);

                $clientPromoCodeService->edit(["activated" => false, "activatedAt" => null]);

                $data['clientPromoCodeId'] = null;
            }

        }


        if (array_key_exists('items', $data) && is_array($data['items'])) {

            $correctItems = [];

            foreach ($data['items'] as $item) {

                if (array_key_exists('quantity', $item) && is_numeric($item['quantity'])) {

                    $quantity = (int)$item['quantity'];

                    for ($i = 1; $i <= $quantity; $i++) {
                        $correctItems[] = $item;
                    }

                } else {
                    $correctItems[] = $item;
                }
            }

            $data['items'] = $correctItems;
        }

        return $data;

    }

    private function applyPromocode($id, $data, $code = '')
    {

        if (!empty($data['promoCodeId']) || !empty($data['promoCode'])) {

            if ($this->getRepository()->getModel()->client_promo_code_id) {

                $clientPromoCodeService = ClientPromoCodeService::findOne([
                    'id' => $this->getRepository()->getModel()->client_promo_code_id,
                ]);

                $clientPromoCodeService->edit(["activated" => false, "activatedAt" => null]);
            }

            try {
                /**
                 * @var PromoCodeService $promoCode
                 */
                if (!empty($data['promoCodeId'])) {
                    $promoCode = PromoCodeService::findOne(['id' => $data['promoCodeId']]);
                } else {
                    $promoCode = PromoCodeService::findOne(['code' => $data['promoCode']]);
                }

            } catch (\Throwable $e) {
                throw new CRMServiceException('Промокод не существует');
            }
            if(!auth()->guard('crm')->check() && $promoCode->getRepository()->getModel()->only_crm) {
                throw new CRMServiceException('Промокод не доступен');
            }


            $promoCode->clientValidate($this->getRepository()->getModel()->client_id);

            /** @var Basket $basketModel */
            $basketModel = $this->getRepository()->getModel();

            /** @var PromoCode $promoCodeModel */
            $promoCodeModel = $promoCode->getRepository()->getModel();

            $promoCodeModel->checkCanApplyToBasket($basketModel);

            try {
                $clientPromoCodeService = ClientPromoCodeService::findOne([
                    'clientId'    => $this->getRepository()->getModel()->client_id,
                    'promoCodeId' => $promoCode->getRepository()->getModel()->id,
                    'activated'   => false,
                ]);
            } catch (\Throwable $e) {

                $deadLine = $promoCode->getRepository()->getModel()->days_for_active ? Carbon::now()->addDays($promoCode->getRepository()->getModel()->days_for_active) : null;

                $clientPromoCodeService = ClientPromoCodeService::add([
                    'clientId'    => $this->getRepository()->getModel()->client_id,
                    'promoCodeId' => $promoCode->getRepository()->getModel()->id,
                    'deadLine'    => $deadLine,
                ]);
            }

            /** @var ClientPromoCode $clientPromoCodeModel */
            $clientPromoCodeModel = $clientPromoCodeService->getRepository()->getModel();

            /* Костыль для дня рождения */
            if ($clientPromoCodeModel->promo_code_id !== 1) {


                if ($clientPromoCodeService->getRepository()->getModel()->date_begin && $clientPromoCodeService->getRepository()->getModel()->date_begin->unix() > Carbon::now()->unix()) {
                    throw new CRMServiceException('Промокод можно активировать только с ' . $clientPromoCodeService->getRepository()->getModel()->date_begin->format('d.m.Y'));
                }


                if ($clientPromoCodeService->getRepository()->getModel()->dead_line && $clientPromoCodeService->getRepository()->getModel()->dead_line->unix() < Carbon::now()->unix()) {
                    throw new CRMServiceException('Время действие промокода истекло');
                }

            }



            $clientPromoCodeService->edit(["activated" => true, "activatedAt" => Carbon::now()]);

            $data['clientPromoCodeId'] = $clientPromoCodeService->getRepository()->getModel()->id;

        } elseif ($this->getRepository()->getModel()->client_promo_code_id) {

            $clientPromoCodeService = ClientPromoCodeService::findOne([
                'id' => $this->getRepository()->getModel()->client_promo_code_id,
            ]);

            $clientPromoCodeService->edit(["activated" => false, "activatedAt" => null]);

            $data['clientPromoCodeId'] = null;
        }

    }


    /**
     * @return Basket
     * @throws CRMServiceException
     * @throws RepositoryException
     */
    public function refreshAndReturnBasket(): Basket
    {
        /**
         * @var BasketService $refreshService
         */
        $refreshService = $this::findOne(['id' => $this->getRepository()->getId()]);

        return $refreshService->getRepository()->getModel();

    }


    /**
     * @return Order
     * @throws CRMServiceException
     * @throws RepositoryException
     * @throws \ReflectionException
     */
    public function createOrder(): Order
    {


        UpdateBasket::dispatch($this->getRepository()->getModel(), Auth()->user());


        if ($order = OrderService::add([
            'basketId'        => $this->getRepository()->getId(),
            'clientId'        => $this->getRepository()->getModel()->client_id,
            'clientAddressId' => $this->getRepository()->getModel()->client_address_id,
            'filialId'        => $this->getRepository()->getModel()->filial_id,
            'deliveryType'    => $this->getRepository()->getModel()->delivery_type,
            'paymentType'     => $this->getRepository()->getModel()->payment_type,
            'date'            => $this->getRepository()->getModel()->date_delivery ?: Carbon::now(),
            'utmSource'       => request()->input('utmSource'),
        ])) {


            $this->edit(['status' => BasketStatus::inOrder]);

            /**
             * @var Order $refreshOrderModel
             *
             */
            $refreshOrderModel = OrderService::findOne(['id' => $order->getRepository()->getModel()->id])->getRepository()->getModel();

            return $refreshOrderModel;
        }

        throw new CRMServiceException('Ошибка создания заказа');
    }


    /**
     * @param array $data
     * @throws RepositoryException
     * @throws CRMServiceException
     * @throws \Throwable
     */
    public function addBasketItem(array $data): void
    {
        $itemId = null;
        $modification = null;


        $menuItemId = $data['menuItemId'];
        $modification = $data['modificationMenuItemId'] ?? $data['modificationId'] ?? null;
        $subMenuItemId = $data['subMenuItemId'] ?? null;
        $comment = $data['comment'] ?? null;
        $type = $data['type'] ?? BasketItemType::Usual;


        $this->basketItemRepository->add([
            'basketId'               => $this->getRepository()->getId(),
            'menuItemId'             => $menuItemId,
            'modificationMenuItemId' => $modification,
            'subMenuItemId'          => $subMenuItemId,
            'type'                   => $type,
            'comment'                => $comment,
        ]);


        $this->events();
    }

    /**
     * @param int $itemId
     * @param array $data
     * @return int|mixed
     * @throws CRMServiceException
     * @throws RepositoryException
     * @throws \Throwable
     */
    public function updateBasketItem(int $itemId, array $data)
    {

        $basketItem = $this->basketItemRepository->findOne([
            'id' => $itemId,
        ]);

        $data['modificationMenuItemId'] =  $data['modificationMenuItemId'] ?? $data['modificationId'] ?? null;

        $basketItem->update($data);


        self::findOne(['id' => $basketItem->getModel()->basket_id])->events();


        return $basketItem->getModel()->basket_id;
    }


    /**
     * @param $id
     * @return int
     * @throws CRMServiceException
     * @throws RepositoryException
     */
    public function deleteItemById($id): int
    {
        $basketItem = $this->basketItemRepository->findOne(['id' => $id]);

        $basketId = $basketItem->getModel()->basket_id;

        $basketItem->delete();

        self::findOne(['id' => $basketId])->events();

        return $basketId;
    }

    /**
     * @param array $data
     * @return int
     * @throws CRMServiceException
     * @throws RepositoryException
     */
    public function deleteByRequest(array $data): int
    {
        $basketItem = $this->basketItemRepository->findOne(['basketId' => $this->getRepository()->getModel()->id, 'menuItemId' => $data['menuItemId'], 'modificationMenuItemId' => $data['modificationId'] ?? $data['modificationMenuItemId'] ?? null, 'subMenuItemId' => $data['subMenuItemId'] ?? null]);

        $basketId = $basketItem->getModel()->basket_id;

        $basketItem->delete();

        $this->events();

        return $basketId;
    }

    /**
     * @param int|null $id
     * @throws CRMServiceException
     * @throws RepositoryException
     */
    public function deleteAllItems(int $id = null): void
    {


        $basketItems = $this->basketItemRepository->findList(['basketId' => $id ?: $this->getRepository()->getId()]);

        foreach ($basketItems as $basketItem) {
            /**
             * @var BasketItemRepository $basketItem
             */
            $basketItem->delete();
        }

        $this->events();

        $this->edit(['totalPrice' => 0]);
    }


    /**
     * @return mixed|void
     * @throws CRMServiceException
     * @throws RepositoryException
     */
    public function events()
    {

        UpdateBasket::dispatch($this::findOne(['id' => $this->getRepository()->getModel()->id])->getRepository()->getModel(), Auth()->user());

    }
}
